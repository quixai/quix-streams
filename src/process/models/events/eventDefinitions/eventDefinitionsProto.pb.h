// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eventDefinitionsProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eventDefinitionsProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eventDefinitionsProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eventDefinitionsProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eventDefinitionsProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eventDefinitionsProto_2eproto;
namespace Quix {
namespace Process {
class EventDefinitionProto;
struct EventDefinitionProtoDefaultTypeInternal;
extern EventDefinitionProtoDefaultTypeInternal _EventDefinitionProto_default_instance_;
class EventDefinitionsProto;
struct EventDefinitionsProtoDefaultTypeInternal;
extern EventDefinitionsProtoDefaultTypeInternal _EventDefinitionsProto_default_instance_;
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> ::Quix::Process::EventDefinitionProto* Arena::CreateMaybeMessage<::Quix::Process::EventDefinitionProto>(Arena*);
template<> ::Quix::Process::EventDefinitionsProto* Arena::CreateMaybeMessage<::Quix::Process::EventDefinitionsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quix {
namespace Process {

// ===================================================================

class EventDefinitionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.EventDefinitionProto) */ {
 public:
  inline EventDefinitionProto() : EventDefinitionProto(nullptr) {}
  ~EventDefinitionProto() override;
  explicit constexpr EventDefinitionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventDefinitionProto(const EventDefinitionProto& from);
  EventDefinitionProto(EventDefinitionProto&& from) noexcept
    : EventDefinitionProto() {
    *this = ::std::move(from);
  }

  inline EventDefinitionProto& operator=(const EventDefinitionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDefinitionProto& operator=(EventDefinitionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDefinitionProto& default_instance() {
    return *internal_default_instance();
  }
  enum NameCase {
    kNameNull = 2,
    kNameValue = 3,
    NAME_NOT_SET = 0,
  };

  enum DescriptionCase {
    kDescriptionNull = 4,
    kDescriptionValue = 5,
    DESCRIPTION_NOT_SET = 0,
  };

  enum CustomPropertiesCase {
    kCustomPropertiesNull = 6,
    kCustomPropertiesValue = 7,
    CUSTOMPROPERTIES_NOT_SET = 0,
  };

  static inline const EventDefinitionProto* internal_default_instance() {
    return reinterpret_cast<const EventDefinitionProto*>(
               &_EventDefinitionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventDefinitionProto& a, EventDefinitionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDefinitionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDefinitionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventDefinitionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventDefinitionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventDefinitionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventDefinitionProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDefinitionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.EventDefinitionProto";
  }
  protected:
  explicit EventDefinitionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocationFieldNumber = 9,
    kLevelFieldNumber = 8,
    kNameNullFieldNumber = 2,
    kNameValueFieldNumber = 3,
    kDescriptionNullFieldNumber = 4,
    kDescriptionValueFieldNumber = 5,
    kCustomPropertiesNullFieldNumber = 6,
    kCustomPropertiesValueFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string location = 9;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // int32 level = 8;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // bool name_null = 2;
  bool has_name_null() const;
  private:
  bool _internal_has_name_null() const;
  public:
  void clear_name_null();
  bool name_null() const;
  void set_name_null(bool value);
  private:
  bool _internal_name_null() const;
  void _internal_set_name_null(bool value);
  public:

  // string name_value = 3;
  bool has_name_value() const;
  private:
  bool _internal_has_name_value() const;
  public:
  void clear_name_value();
  const std::string& name_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_value();
  PROTOBUF_NODISCARD std::string* release_name_value();
  void set_allocated_name_value(std::string* name_value);
  private:
  const std::string& _internal_name_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_value(const std::string& value);
  std::string* _internal_mutable_name_value();
  public:

  // bool description_null = 4;
  bool has_description_null() const;
  private:
  bool _internal_has_description_null() const;
  public:
  void clear_description_null();
  bool description_null() const;
  void set_description_null(bool value);
  private:
  bool _internal_description_null() const;
  void _internal_set_description_null(bool value);
  public:

  // string description_value = 5;
  bool has_description_value() const;
  private:
  bool _internal_has_description_value() const;
  public:
  void clear_description_value();
  const std::string& description_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description_value();
  PROTOBUF_NODISCARD std::string* release_description_value();
  void set_allocated_description_value(std::string* description_value);
  private:
  const std::string& _internal_description_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description_value(const std::string& value);
  std::string* _internal_mutable_description_value();
  public:

  // bool customProperties_null = 6;
  bool has_customproperties_null() const;
  private:
  bool _internal_has_customproperties_null() const;
  public:
  void clear_customproperties_null();
  bool customproperties_null() const;
  void set_customproperties_null(bool value);
  private:
  bool _internal_customproperties_null() const;
  void _internal_set_customproperties_null(bool value);
  public:

  // string customProperties_value = 7;
  bool has_customproperties_value() const;
  private:
  bool _internal_has_customproperties_value() const;
  public:
  void clear_customproperties_value();
  const std::string& customproperties_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customproperties_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customproperties_value();
  PROTOBUF_NODISCARD std::string* release_customproperties_value();
  void set_allocated_customproperties_value(std::string* customproperties_value);
  private:
  const std::string& _internal_customproperties_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customproperties_value(const std::string& value);
  std::string* _internal_mutable_customproperties_value();
  public:

  void clear_name();
  NameCase name_case() const;
  void clear_description();
  DescriptionCase description_case() const;
  void clear_customProperties();
  CustomPropertiesCase customProperties_case() const;
  // @@protoc_insertion_point(class_scope:Quix.Process.EventDefinitionProto)
 private:
  class _Internal;
  void set_has_name_null();
  void set_has_name_value();
  void set_has_description_null();
  void set_has_description_value();
  void set_has_customproperties_null();
  void set_has_customproperties_value();

  inline bool has_name() const;
  inline void clear_has_name();

  inline bool has_description() const;
  inline void clear_has_description();

  inline bool has_customProperties() const;
  inline void clear_has_customProperties();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  int32_t level_;
  union NameUnion {
    constexpr NameUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool name_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_value_;
  } name_;
  union DescriptionUnion {
    constexpr DescriptionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool description_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_value_;
  } description_;
  union CustomPropertiesUnion {
    constexpr CustomPropertiesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool customproperties_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customproperties_value_;
  } customProperties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[3];

  friend struct ::TableStruct_eventDefinitionsProto_2eproto;
};
// -------------------------------------------------------------------

class EventDefinitionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.EventDefinitionsProto) */ {
 public:
  inline EventDefinitionsProto() : EventDefinitionsProto(nullptr) {}
  ~EventDefinitionsProto() override;
  explicit constexpr EventDefinitionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventDefinitionsProto(const EventDefinitionsProto& from);
  EventDefinitionsProto(EventDefinitionsProto&& from) noexcept
    : EventDefinitionsProto() {
    *this = ::std::move(from);
  }

  inline EventDefinitionsProto& operator=(const EventDefinitionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDefinitionsProto& operator=(EventDefinitionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDefinitionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventDefinitionsProto* internal_default_instance() {
    return reinterpret_cast<const EventDefinitionsProto*>(
               &_EventDefinitionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventDefinitionsProto& a, EventDefinitionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDefinitionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDefinitionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventDefinitionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventDefinitionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventDefinitionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventDefinitionsProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDefinitionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.EventDefinitionsProto";
  }
  protected:
  explicit EventDefinitionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .Quix.Process.EventDefinitionProto events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::Quix::Process::EventDefinitionProto* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDefinitionProto >*
      mutable_events();
  private:
  const ::Quix::Process::EventDefinitionProto& _internal_events(int index) const;
  ::Quix::Process::EventDefinitionProto* _internal_add_events();
  public:
  const ::Quix::Process::EventDefinitionProto& events(int index) const;
  ::Quix::Process::EventDefinitionProto* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDefinitionProto >&
      events() const;

  // @@protoc_insertion_point(class_scope:Quix.Process.EventDefinitionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDefinitionProto > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eventDefinitionsProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventDefinitionProto

// string id = 1;
inline void EventDefinitionProto::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& EventDefinitionProto::id() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventDefinitionProto::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.id)
}
inline std::string* EventDefinitionProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionProto.id)
  return _s;
}
inline const std::string& EventDefinitionProto::_internal_id() const {
  return id_.Get();
}
inline void EventDefinitionProto::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::release_id() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDefinitionProto.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EventDefinitionProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDefinitionProto.id)
}

// bool name_null = 2;
inline bool EventDefinitionProto::_internal_has_name_null() const {
  return name_case() == kNameNull;
}
inline bool EventDefinitionProto::has_name_null() const {
  return _internal_has_name_null();
}
inline void EventDefinitionProto::set_has_name_null() {
  _oneof_case_[0] = kNameNull;
}
inline void EventDefinitionProto::clear_name_null() {
  if (_internal_has_name_null()) {
    name_.name_null_ = false;
    clear_has_name();
  }
}
inline bool EventDefinitionProto::_internal_name_null() const {
  if (_internal_has_name_null()) {
    return name_.name_null_;
  }
  return false;
}
inline void EventDefinitionProto::_internal_set_name_null(bool value) {
  if (!_internal_has_name_null()) {
    clear_name();
    set_has_name_null();
  }
  name_.name_null_ = value;
}
inline bool EventDefinitionProto::name_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.name_null)
  return _internal_name_null();
}
inline void EventDefinitionProto::set_name_null(bool value) {
  _internal_set_name_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.name_null)
}

// string name_value = 3;
inline bool EventDefinitionProto::_internal_has_name_value() const {
  return name_case() == kNameValue;
}
inline bool EventDefinitionProto::has_name_value() const {
  return _internal_has_name_value();
}
inline void EventDefinitionProto::set_has_name_value() {
  _oneof_case_[0] = kNameValue;
}
inline void EventDefinitionProto::clear_name_value() {
  if (_internal_has_name_value()) {
    name_.name_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_name();
  }
}
inline const std::string& EventDefinitionProto::name_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.name_value)
  return _internal_name_value();
}
template <typename ArgT0, typename... ArgT>
inline void EventDefinitionProto::set_name_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_.name_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.name_value)
}
inline std::string* EventDefinitionProto::mutable_name_value() {
  std::string* _s = _internal_mutable_name_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionProto.name_value)
  return _s;
}
inline const std::string& EventDefinitionProto::_internal_name_value() const {
  if (_internal_has_name_value()) {
    return name_.name_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EventDefinitionProto::_internal_set_name_value(const std::string& value) {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_.name_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::_internal_mutable_name_value() {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return name_.name_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::release_name_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDefinitionProto.name_value)
  if (_internal_has_name_value()) {
    clear_has_name();
    return name_.name_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EventDefinitionProto::set_allocated_name_value(std::string* name_value) {
  if (has_name()) {
    clear_name();
  }
  if (name_value != nullptr) {
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(name_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(name_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDefinitionProto.name_value)
}

// bool description_null = 4;
inline bool EventDefinitionProto::_internal_has_description_null() const {
  return description_case() == kDescriptionNull;
}
inline bool EventDefinitionProto::has_description_null() const {
  return _internal_has_description_null();
}
inline void EventDefinitionProto::set_has_description_null() {
  _oneof_case_[1] = kDescriptionNull;
}
inline void EventDefinitionProto::clear_description_null() {
  if (_internal_has_description_null()) {
    description_.description_null_ = false;
    clear_has_description();
  }
}
inline bool EventDefinitionProto::_internal_description_null() const {
  if (_internal_has_description_null()) {
    return description_.description_null_;
  }
  return false;
}
inline void EventDefinitionProto::_internal_set_description_null(bool value) {
  if (!_internal_has_description_null()) {
    clear_description();
    set_has_description_null();
  }
  description_.description_null_ = value;
}
inline bool EventDefinitionProto::description_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.description_null)
  return _internal_description_null();
}
inline void EventDefinitionProto::set_description_null(bool value) {
  _internal_set_description_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.description_null)
}

// string description_value = 5;
inline bool EventDefinitionProto::_internal_has_description_value() const {
  return description_case() == kDescriptionValue;
}
inline bool EventDefinitionProto::has_description_value() const {
  return _internal_has_description_value();
}
inline void EventDefinitionProto::set_has_description_value() {
  _oneof_case_[1] = kDescriptionValue;
}
inline void EventDefinitionProto::clear_description_value() {
  if (_internal_has_description_value()) {
    description_.description_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_description();
  }
}
inline const std::string& EventDefinitionProto::description_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.description_value)
  return _internal_description_value();
}
template <typename ArgT0, typename... ArgT>
inline void EventDefinitionProto::set_description_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  description_.description_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.description_value)
}
inline std::string* EventDefinitionProto::mutable_description_value() {
  std::string* _s = _internal_mutable_description_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionProto.description_value)
  return _s;
}
inline const std::string& EventDefinitionProto::_internal_description_value() const {
  if (_internal_has_description_value()) {
    return description_.description_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EventDefinitionProto::_internal_set_description_value(const std::string& value) {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  description_.description_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::_internal_mutable_description_value() {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return description_.description_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::release_description_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDefinitionProto.description_value)
  if (_internal_has_description_value()) {
    clear_has_description();
    return description_.description_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EventDefinitionProto::set_allocated_description_value(std::string* description_value) {
  if (has_description()) {
    clear_description();
  }
  if (description_value != nullptr) {
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(description_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(description_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDefinitionProto.description_value)
}

// bool customProperties_null = 6;
inline bool EventDefinitionProto::_internal_has_customproperties_null() const {
  return customProperties_case() == kCustomPropertiesNull;
}
inline bool EventDefinitionProto::has_customproperties_null() const {
  return _internal_has_customproperties_null();
}
inline void EventDefinitionProto::set_has_customproperties_null() {
  _oneof_case_[2] = kCustomPropertiesNull;
}
inline void EventDefinitionProto::clear_customproperties_null() {
  if (_internal_has_customproperties_null()) {
    customProperties_.customproperties_null_ = false;
    clear_has_customProperties();
  }
}
inline bool EventDefinitionProto::_internal_customproperties_null() const {
  if (_internal_has_customproperties_null()) {
    return customProperties_.customproperties_null_;
  }
  return false;
}
inline void EventDefinitionProto::_internal_set_customproperties_null(bool value) {
  if (!_internal_has_customproperties_null()) {
    clear_customProperties();
    set_has_customproperties_null();
  }
  customProperties_.customproperties_null_ = value;
}
inline bool EventDefinitionProto::customproperties_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.customProperties_null)
  return _internal_customproperties_null();
}
inline void EventDefinitionProto::set_customproperties_null(bool value) {
  _internal_set_customproperties_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.customProperties_null)
}

// string customProperties_value = 7;
inline bool EventDefinitionProto::_internal_has_customproperties_value() const {
  return customProperties_case() == kCustomPropertiesValue;
}
inline bool EventDefinitionProto::has_customproperties_value() const {
  return _internal_has_customproperties_value();
}
inline void EventDefinitionProto::set_has_customproperties_value() {
  _oneof_case_[2] = kCustomPropertiesValue;
}
inline void EventDefinitionProto::clear_customproperties_value() {
  if (_internal_has_customproperties_value()) {
    customProperties_.customproperties_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_customProperties();
  }
}
inline const std::string& EventDefinitionProto::customproperties_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.customProperties_value)
  return _internal_customproperties_value();
}
template <typename ArgT0, typename... ArgT>
inline void EventDefinitionProto::set_customproperties_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customProperties_.customproperties_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.customProperties_value)
}
inline std::string* EventDefinitionProto::mutable_customproperties_value() {
  std::string* _s = _internal_mutable_customproperties_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionProto.customProperties_value)
  return _s;
}
inline const std::string& EventDefinitionProto::_internal_customproperties_value() const {
  if (_internal_has_customproperties_value()) {
    return customProperties_.customproperties_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EventDefinitionProto::_internal_set_customproperties_value(const std::string& value) {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customProperties_.customproperties_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::_internal_mutable_customproperties_value() {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customProperties_.customproperties_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::release_customproperties_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDefinitionProto.customProperties_value)
  if (_internal_has_customproperties_value()) {
    clear_has_customProperties();
    return customProperties_.customproperties_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EventDefinitionProto::set_allocated_customproperties_value(std::string* customproperties_value) {
  if (has_customProperties()) {
    clear_customProperties();
  }
  if (customproperties_value != nullptr) {
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(customproperties_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(customproperties_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDefinitionProto.customProperties_value)
}

// int32 level = 8;
inline void EventDefinitionProto::clear_level() {
  level_ = 0;
}
inline int32_t EventDefinitionProto::_internal_level() const {
  return level_;
}
inline int32_t EventDefinitionProto::level() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.level)
  return _internal_level();
}
inline void EventDefinitionProto::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void EventDefinitionProto::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.level)
}

// string location = 9;
inline void EventDefinitionProto::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& EventDefinitionProto::location() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionProto.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventDefinitionProto::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDefinitionProto.location)
}
inline std::string* EventDefinitionProto::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionProto.location)
  return _s;
}
inline const std::string& EventDefinitionProto::_internal_location() const {
  return location_.Get();
}
inline void EventDefinitionProto::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDefinitionProto::release_location() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDefinitionProto.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EventDefinitionProto::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDefinitionProto.location)
}

inline bool EventDefinitionProto::has_name() const {
  return name_case() != NAME_NOT_SET;
}
inline void EventDefinitionProto::clear_has_name() {
  _oneof_case_[0] = NAME_NOT_SET;
}
inline bool EventDefinitionProto::has_description() const {
  return description_case() != DESCRIPTION_NOT_SET;
}
inline void EventDefinitionProto::clear_has_description() {
  _oneof_case_[1] = DESCRIPTION_NOT_SET;
}
inline bool EventDefinitionProto::has_customProperties() const {
  return customProperties_case() != CUSTOMPROPERTIES_NOT_SET;
}
inline void EventDefinitionProto::clear_has_customProperties() {
  _oneof_case_[2] = CUSTOMPROPERTIES_NOT_SET;
}
inline EventDefinitionProto::NameCase EventDefinitionProto::name_case() const {
  return EventDefinitionProto::NameCase(_oneof_case_[0]);
}
inline EventDefinitionProto::DescriptionCase EventDefinitionProto::description_case() const {
  return EventDefinitionProto::DescriptionCase(_oneof_case_[1]);
}
inline EventDefinitionProto::CustomPropertiesCase EventDefinitionProto::customProperties_case() const {
  return EventDefinitionProto::CustomPropertiesCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// EventDefinitionsProto

// repeated .Quix.Process.EventDefinitionProto events = 1;
inline int EventDefinitionsProto::_internal_events_size() const {
  return events_.size();
}
inline int EventDefinitionsProto::events_size() const {
  return _internal_events_size();
}
inline void EventDefinitionsProto::clear_events() {
  events_.Clear();
}
inline ::Quix::Process::EventDefinitionProto* EventDefinitionsProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDefinitionsProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDefinitionProto >*
EventDefinitionsProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.EventDefinitionsProto.events)
  return &events_;
}
inline const ::Quix::Process::EventDefinitionProto& EventDefinitionsProto::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::Quix::Process::EventDefinitionProto& EventDefinitionsProto::events(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDefinitionsProto.events)
  return _internal_events(index);
}
inline ::Quix::Process::EventDefinitionProto* EventDefinitionsProto::_internal_add_events() {
  return events_.Add();
}
inline ::Quix::Process::EventDefinitionProto* EventDefinitionsProto::add_events() {
  ::Quix::Process::EventDefinitionProto* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:Quix.Process.EventDefinitionsProto.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDefinitionProto >&
EventDefinitionsProto::events() const {
  // @@protoc_insertion_point(field_list:Quix.Process.EventDefinitionsProto.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Process
}  // namespace Quix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eventDefinitionsProto_2eproto
