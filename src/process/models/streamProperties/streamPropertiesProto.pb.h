// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamPropertiesProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_streamPropertiesProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_streamPropertiesProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_streamPropertiesProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_streamPropertiesProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streamPropertiesProto_2eproto;
namespace Quix {
namespace Process {
class StreamPropertiesProto;
struct StreamPropertiesProtoDefaultTypeInternal;
extern StreamPropertiesProtoDefaultTypeInternal _StreamPropertiesProto_default_instance_;
class StreamPropertiesProto_MetadataEntry_DoNotUse;
struct StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal _StreamPropertiesProto_MetadataEntry_DoNotUse_default_instance_;
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> ::Quix::Process::StreamPropertiesProto* Arena::CreateMaybeMessage<::Quix::Process::StreamPropertiesProto>(Arena*);
template<> ::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quix {
namespace Process {

// ===================================================================

class StreamPropertiesProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamPropertiesProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamPropertiesProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StreamPropertiesProto_MetadataEntry_DoNotUse();
  explicit constexpr StreamPropertiesProto_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StreamPropertiesProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamPropertiesProto_MetadataEntry_DoNotUse& other);
  static const StreamPropertiesProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamPropertiesProto_MetadataEntry_DoNotUse*>(&_StreamPropertiesProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Quix.Process.StreamPropertiesProto.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Quix.Process.StreamPropertiesProto.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class StreamPropertiesProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.StreamPropertiesProto) */ {
 public:
  inline StreamPropertiesProto() : StreamPropertiesProto(nullptr) {}
  ~StreamPropertiesProto() override;
  explicit constexpr StreamPropertiesProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPropertiesProto(const StreamPropertiesProto& from);
  StreamPropertiesProto(StreamPropertiesProto&& from) noexcept
    : StreamPropertiesProto() {
    *this = ::std::move(from);
  }

  inline StreamPropertiesProto& operator=(const StreamPropertiesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPropertiesProto& operator=(StreamPropertiesProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPropertiesProto& default_instance() {
    return *internal_default_instance();
  }
  enum TimeOfRecordingCase {
    kTimeOfRecordingNull = 5,
    kTimeOfRecordingValue = 6,
    TIMEOFRECORDING_NOT_SET = 0,
  };

  static inline const StreamPropertiesProto* internal_default_instance() {
    return reinterpret_cast<const StreamPropertiesProto*>(
               &_StreamPropertiesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamPropertiesProto& a, StreamPropertiesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPropertiesProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPropertiesProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPropertiesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPropertiesProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPropertiesProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamPropertiesProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPropertiesProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.StreamPropertiesProto";
  }
  protected:
  explicit StreamPropertiesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kParentsFieldNumber = 4,
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
    kTimeOfRecordingNullFieldNumber = 5,
    kTimeOfRecordingValueFieldNumber = 6,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // repeated string parents = 4;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  const std::string& parents(int index) const;
  std::string* mutable_parents(int index);
  void set_parents(int index, const std::string& value);
  void set_parents(int index, std::string&& value);
  void set_parents(int index, const char* value);
  void set_parents(int index, const char* value, size_t size);
  std::string* add_parents();
  void add_parents(const std::string& value);
  void add_parents(std::string&& value);
  void add_parents(const char* value);
  void add_parents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parents();
  private:
  const std::string& _internal_parents(int index) const;
  std::string* _internal_add_parents();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // bool timeOfRecording_null = 5;
  bool has_timeofrecording_null() const;
  private:
  bool _internal_has_timeofrecording_null() const;
  public:
  void clear_timeofrecording_null();
  bool timeofrecording_null() const;
  void set_timeofrecording_null(bool value);
  private:
  bool _internal_timeofrecording_null() const;
  void _internal_set_timeofrecording_null(bool value);
  public:

  // int64 timeOfRecording_value = 6;
  bool has_timeofrecording_value() const;
  private:
  bool _internal_has_timeofrecording_value() const;
  public:
  void clear_timeofrecording_value();
  int64_t timeofrecording_value() const;
  void set_timeofrecording_value(int64_t value);
  private:
  int64_t _internal_timeofrecording_value() const;
  void _internal_set_timeofrecording_value(int64_t value);
  public:

  void clear_timeOfRecording();
  TimeOfRecordingCase timeOfRecording_case() const;
  // @@protoc_insertion_point(class_scope:Quix.Process.StreamPropertiesProto)
 private:
  class _Internal;
  void set_has_timeofrecording_null();
  void set_has_timeofrecording_value();

  inline bool has_timeOfRecording() const;
  inline void clear_has_timeOfRecording();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamPropertiesProto_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  union TimeOfRecordingUnion {
    constexpr TimeOfRecordingUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool timeofrecording_null_;
    int64_t timeofrecording_value_;
  } timeOfRecording_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_streamPropertiesProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamPropertiesProto

// string name = 1;
inline void StreamPropertiesProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StreamPropertiesProto::name() const {
  // @@protoc_insertion_point(field_get:Quix.Process.StreamPropertiesProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPropertiesProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.name)
}
inline std::string* StreamPropertiesProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Quix.Process.StreamPropertiesProto.name)
  return _s;
}
inline const std::string& StreamPropertiesProto::_internal_name() const {
  return name_.Get();
}
inline void StreamPropertiesProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamPropertiesProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamPropertiesProto::release_name() {
  // @@protoc_insertion_point(field_release:Quix.Process.StreamPropertiesProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamPropertiesProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.StreamPropertiesProto.name)
}

// string location = 2;
inline void StreamPropertiesProto::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& StreamPropertiesProto::location() const {
  // @@protoc_insertion_point(field_get:Quix.Process.StreamPropertiesProto.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPropertiesProto::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.location)
}
inline std::string* StreamPropertiesProto::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Quix.Process.StreamPropertiesProto.location)
  return _s;
}
inline const std::string& StreamPropertiesProto::_internal_location() const {
  return location_.Get();
}
inline void StreamPropertiesProto::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamPropertiesProto::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamPropertiesProto::release_location() {
  // @@protoc_insertion_point(field_release:Quix.Process.StreamPropertiesProto.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamPropertiesProto::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.StreamPropertiesProto.location)
}

// map<string, string> metadata = 3;
inline int StreamPropertiesProto::_internal_metadata_size() const {
  return metadata_.size();
}
inline int StreamPropertiesProto::metadata_size() const {
  return _internal_metadata_size();
}
inline void StreamPropertiesProto::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamPropertiesProto::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamPropertiesProto::metadata() const {
  // @@protoc_insertion_point(field_map:Quix.Process.StreamPropertiesProto.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamPropertiesProto::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamPropertiesProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Quix.Process.StreamPropertiesProto.metadata)
  return _internal_mutable_metadata();
}

// repeated string parents = 4;
inline int StreamPropertiesProto::_internal_parents_size() const {
  return parents_.size();
}
inline int StreamPropertiesProto::parents_size() const {
  return _internal_parents_size();
}
inline void StreamPropertiesProto::clear_parents() {
  parents_.Clear();
}
inline std::string* StreamPropertiesProto::add_parents() {
  std::string* _s = _internal_add_parents();
  // @@protoc_insertion_point(field_add_mutable:Quix.Process.StreamPropertiesProto.parents)
  return _s;
}
inline const std::string& StreamPropertiesProto::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const std::string& StreamPropertiesProto::parents(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.StreamPropertiesProto.parents)
  return _internal_parents(index);
}
inline std::string* StreamPropertiesProto::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.StreamPropertiesProto.parents)
  return parents_.Mutable(index);
}
inline void StreamPropertiesProto::set_parents(int index, const std::string& value) {
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::set_parents(int index, std::string&& value) {
  parents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::set_parents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::set_parents(int index, const char* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Quix.Process.StreamPropertiesProto.parents)
}
inline std::string* StreamPropertiesProto::_internal_add_parents() {
  return parents_.Add();
}
inline void StreamPropertiesProto::add_parents(const std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::add_parents(std::string&& value) {
  parents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::add_parents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Quix.Process.StreamPropertiesProto.parents)
}
inline void StreamPropertiesProto::add_parents(const char* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Quix.Process.StreamPropertiesProto.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamPropertiesProto::parents() const {
  // @@protoc_insertion_point(field_list:Quix.Process.StreamPropertiesProto.parents)
  return parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamPropertiesProto::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.StreamPropertiesProto.parents)
  return &parents_;
}

// bool timeOfRecording_null = 5;
inline bool StreamPropertiesProto::_internal_has_timeofrecording_null() const {
  return timeOfRecording_case() == kTimeOfRecordingNull;
}
inline bool StreamPropertiesProto::has_timeofrecording_null() const {
  return _internal_has_timeofrecording_null();
}
inline void StreamPropertiesProto::set_has_timeofrecording_null() {
  _oneof_case_[0] = kTimeOfRecordingNull;
}
inline void StreamPropertiesProto::clear_timeofrecording_null() {
  if (_internal_has_timeofrecording_null()) {
    timeOfRecording_.timeofrecording_null_ = false;
    clear_has_timeOfRecording();
  }
}
inline bool StreamPropertiesProto::_internal_timeofrecording_null() const {
  if (_internal_has_timeofrecording_null()) {
    return timeOfRecording_.timeofrecording_null_;
  }
  return false;
}
inline void StreamPropertiesProto::_internal_set_timeofrecording_null(bool value) {
  if (!_internal_has_timeofrecording_null()) {
    clear_timeOfRecording();
    set_has_timeofrecording_null();
  }
  timeOfRecording_.timeofrecording_null_ = value;
}
inline bool StreamPropertiesProto::timeofrecording_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.StreamPropertiesProto.timeOfRecording_null)
  return _internal_timeofrecording_null();
}
inline void StreamPropertiesProto::set_timeofrecording_null(bool value) {
  _internal_set_timeofrecording_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.timeOfRecording_null)
}

// int64 timeOfRecording_value = 6;
inline bool StreamPropertiesProto::_internal_has_timeofrecording_value() const {
  return timeOfRecording_case() == kTimeOfRecordingValue;
}
inline bool StreamPropertiesProto::has_timeofrecording_value() const {
  return _internal_has_timeofrecording_value();
}
inline void StreamPropertiesProto::set_has_timeofrecording_value() {
  _oneof_case_[0] = kTimeOfRecordingValue;
}
inline void StreamPropertiesProto::clear_timeofrecording_value() {
  if (_internal_has_timeofrecording_value()) {
    timeOfRecording_.timeofrecording_value_ = int64_t{0};
    clear_has_timeOfRecording();
  }
}
inline int64_t StreamPropertiesProto::_internal_timeofrecording_value() const {
  if (_internal_has_timeofrecording_value()) {
    return timeOfRecording_.timeofrecording_value_;
  }
  return int64_t{0};
}
inline void StreamPropertiesProto::_internal_set_timeofrecording_value(int64_t value) {
  if (!_internal_has_timeofrecording_value()) {
    clear_timeOfRecording();
    set_has_timeofrecording_value();
  }
  timeOfRecording_.timeofrecording_value_ = value;
}
inline int64_t StreamPropertiesProto::timeofrecording_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.StreamPropertiesProto.timeOfRecording_value)
  return _internal_timeofrecording_value();
}
inline void StreamPropertiesProto::set_timeofrecording_value(int64_t value) {
  _internal_set_timeofrecording_value(value);
  // @@protoc_insertion_point(field_set:Quix.Process.StreamPropertiesProto.timeOfRecording_value)
}

inline bool StreamPropertiesProto::has_timeOfRecording() const {
  return timeOfRecording_case() != TIMEOFRECORDING_NOT_SET;
}
inline void StreamPropertiesProto::clear_has_timeOfRecording() {
  _oneof_case_[0] = TIMEOFRECORDING_NOT_SET;
}
inline StreamPropertiesProto::TimeOfRecordingCase StreamPropertiesProto::timeOfRecording_case() const {
  return StreamPropertiesProto::TimeOfRecordingCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Process
}  // namespace Quix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_streamPropertiesProto_2eproto
