// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameterDataRawProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parameterDataRawProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parameterDataRawProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parameterDataRawProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parameterDataRawProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parameterDataRawProto_2eproto;
namespace Quix {
namespace Process {
class ParameterDataRawProto;
struct ParameterDataRawProtoDefaultTypeInternal;
extern ParameterDataRawProtoDefaultTypeInternal _ParameterDataRawProto_default_instance_;
class ParameterDataRawProto_BinaryValues;
struct ParameterDataRawProto_BinaryValuesDefaultTypeInternal;
extern ParameterDataRawProto_BinaryValuesDefaultTypeInternal _ParameterDataRawProto_BinaryValues_default_instance_;
class ParameterDataRawProto_NumericValues;
struct ParameterDataRawProto_NumericValuesDefaultTypeInternal;
extern ParameterDataRawProto_NumericValuesDefaultTypeInternal _ParameterDataRawProto_NumericValues_default_instance_;
class ParameterDataRawProto_StringValues;
struct ParameterDataRawProto_StringValuesDefaultTypeInternal;
extern ParameterDataRawProto_StringValuesDefaultTypeInternal _ParameterDataRawProto_StringValues_default_instance_;
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> ::Quix::Process::ParameterDataRawProto* Arena::CreateMaybeMessage<::Quix::Process::ParameterDataRawProto>(Arena*);
template<> ::Quix::Process::ParameterDataRawProto_BinaryValues* Arena::CreateMaybeMessage<::Quix::Process::ParameterDataRawProto_BinaryValues>(Arena*);
template<> ::Quix::Process::ParameterDataRawProto_NumericValues* Arena::CreateMaybeMessage<::Quix::Process::ParameterDataRawProto_NumericValues>(Arena*);
template<> ::Quix::Process::ParameterDataRawProto_StringValues* Arena::CreateMaybeMessage<::Quix::Process::ParameterDataRawProto_StringValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quix {
namespace Process {

// ===================================================================

class ParameterDataRawProto_NumericValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDataRawProto.NumericValues) */ {
 public:
  inline ParameterDataRawProto_NumericValues() : ParameterDataRawProto_NumericValues(nullptr) {}
  ~ParameterDataRawProto_NumericValues() override;
  explicit constexpr ParameterDataRawProto_NumericValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDataRawProto_NumericValues(const ParameterDataRawProto_NumericValues& from);
  ParameterDataRawProto_NumericValues(ParameterDataRawProto_NumericValues&& from) noexcept
    : ParameterDataRawProto_NumericValues() {
    *this = ::std::move(from);
  }

  inline ParameterDataRawProto_NumericValues& operator=(const ParameterDataRawProto_NumericValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDataRawProto_NumericValues& operator=(ParameterDataRawProto_NumericValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDataRawProto_NumericValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterDataRawProto_NumericValues* internal_default_instance() {
    return reinterpret_cast<const ParameterDataRawProto_NumericValues*>(
               &_ParameterDataRawProto_NumericValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParameterDataRawProto_NumericValues& a, ParameterDataRawProto_NumericValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDataRawProto_NumericValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDataRawProto_NumericValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDataRawProto_NumericValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDataRawProto_NumericValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDataRawProto_NumericValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDataRawProto_NumericValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDataRawProto_NumericValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDataRawProto.NumericValues";
  }
  protected:
  explicit ParameterDataRawProto_NumericValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsnullFieldNumber = 2,
    kValuesFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated bool isnull = 2;
  int isnull_size() const;
  private:
  int _internal_isnull_size() const;
  public:
  void clear_isnull();
  private:
  bool _internal_isnull(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_isnull() const;
  void _internal_add_isnull(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_isnull();
  public:
  bool isnull(int index) const;
  void set_isnull(int index, bool value);
  void add_isnull(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      isnull() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_isnull();

  // repeated double values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // string header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDataRawProto.NumericValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > isnull_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameterDataRawProto_2eproto;
};
// -------------------------------------------------------------------

class ParameterDataRawProto_StringValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDataRawProto.StringValues) */ {
 public:
  inline ParameterDataRawProto_StringValues() : ParameterDataRawProto_StringValues(nullptr) {}
  ~ParameterDataRawProto_StringValues() override;
  explicit constexpr ParameterDataRawProto_StringValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDataRawProto_StringValues(const ParameterDataRawProto_StringValues& from);
  ParameterDataRawProto_StringValues(ParameterDataRawProto_StringValues&& from) noexcept
    : ParameterDataRawProto_StringValues() {
    *this = ::std::move(from);
  }

  inline ParameterDataRawProto_StringValues& operator=(const ParameterDataRawProto_StringValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDataRawProto_StringValues& operator=(ParameterDataRawProto_StringValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDataRawProto_StringValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterDataRawProto_StringValues* internal_default_instance() {
    return reinterpret_cast<const ParameterDataRawProto_StringValues*>(
               &_ParameterDataRawProto_StringValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParameterDataRawProto_StringValues& a, ParameterDataRawProto_StringValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDataRawProto_StringValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDataRawProto_StringValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDataRawProto_StringValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDataRawProto_StringValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDataRawProto_StringValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDataRawProto_StringValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDataRawProto_StringValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDataRawProto.StringValues";
  }
  protected:
  explicit ParameterDataRawProto_StringValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsnullFieldNumber = 2,
    kValuesFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated bool isnull = 2;
  int isnull_size() const;
  private:
  int _internal_isnull_size() const;
  public:
  void clear_isnull();
  private:
  bool _internal_isnull(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_isnull() const;
  void _internal_add_isnull(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_isnull();
  public:
  bool isnull(int index) const;
  void set_isnull(int index, bool value);
  void add_isnull(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      isnull() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_isnull();

  // repeated string values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDataRawProto.StringValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > isnull_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameterDataRawProto_2eproto;
};
// -------------------------------------------------------------------

class ParameterDataRawProto_BinaryValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDataRawProto.BinaryValues) */ {
 public:
  inline ParameterDataRawProto_BinaryValues() : ParameterDataRawProto_BinaryValues(nullptr) {}
  ~ParameterDataRawProto_BinaryValues() override;
  explicit constexpr ParameterDataRawProto_BinaryValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDataRawProto_BinaryValues(const ParameterDataRawProto_BinaryValues& from);
  ParameterDataRawProto_BinaryValues(ParameterDataRawProto_BinaryValues&& from) noexcept
    : ParameterDataRawProto_BinaryValues() {
    *this = ::std::move(from);
  }

  inline ParameterDataRawProto_BinaryValues& operator=(const ParameterDataRawProto_BinaryValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDataRawProto_BinaryValues& operator=(ParameterDataRawProto_BinaryValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDataRawProto_BinaryValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterDataRawProto_BinaryValues* internal_default_instance() {
    return reinterpret_cast<const ParameterDataRawProto_BinaryValues*>(
               &_ParameterDataRawProto_BinaryValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParameterDataRawProto_BinaryValues& a, ParameterDataRawProto_BinaryValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDataRawProto_BinaryValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDataRawProto_BinaryValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDataRawProto_BinaryValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDataRawProto_BinaryValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDataRawProto_BinaryValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDataRawProto_BinaryValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDataRawProto_BinaryValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDataRawProto.BinaryValues";
  }
  protected:
  explicit ParameterDataRawProto_BinaryValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsnullFieldNumber = 2,
    kValuesFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated bool isnull = 2;
  int isnull_size() const;
  private:
  int _internal_isnull_size() const;
  public:
  void clear_isnull();
  private:
  bool _internal_isnull(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_isnull() const;
  void _internal_add_isnull(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_isnull();
  public:
  bool isnull(int index) const;
  void set_isnull(int index, bool value);
  void add_isnull(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      isnull() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_isnull();

  // repeated bytes values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDataRawProto.BinaryValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > isnull_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameterDataRawProto_2eproto;
};
// -------------------------------------------------------------------

class ParameterDataRawProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDataRawProto) */ {
 public:
  inline ParameterDataRawProto() : ParameterDataRawProto(nullptr) {}
  ~ParameterDataRawProto() override;
  explicit constexpr ParameterDataRawProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDataRawProto(const ParameterDataRawProto& from);
  ParameterDataRawProto(ParameterDataRawProto&& from) noexcept
    : ParameterDataRawProto() {
    *this = ::std::move(from);
  }

  inline ParameterDataRawProto& operator=(const ParameterDataRawProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDataRawProto& operator=(ParameterDataRawProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDataRawProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterDataRawProto* internal_default_instance() {
    return reinterpret_cast<const ParameterDataRawProto*>(
               &_ParameterDataRawProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParameterDataRawProto& a, ParameterDataRawProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDataRawProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDataRawProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDataRawProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDataRawProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDataRawProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDataRawProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDataRawProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDataRawProto";
  }
  protected:
  explicit ParameterDataRawProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParameterDataRawProto_NumericValues NumericValues;
  typedef ParameterDataRawProto_StringValues StringValues;
  typedef ParameterDataRawProto_BinaryValues BinaryValues;

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 2,
    kNumericValuesFieldNumber = 3,
    kStringValuesFieldNumber = 4,
    kBinaryValuesFieldNumber = 5,
    kTagValuesFieldNumber = 6,
    kEpochFieldNumber = 1,
  };
  // repeated int64 timestamps = 2;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  int64_t _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_timestamps() const;
  void _internal_add_timestamps(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_timestamps();
  public:
  int64_t timestamps(int index) const;
  void set_timestamps(int index, int64_t value);
  void add_timestamps(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_timestamps();

  // repeated .Quix.Process.ParameterDataRawProto.NumericValues numeric_values = 3;
  int numeric_values_size() const;
  private:
  int _internal_numeric_values_size() const;
  public:
  void clear_numeric_values();
  ::Quix::Process::ParameterDataRawProto_NumericValues* mutable_numeric_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_NumericValues >*
      mutable_numeric_values();
  private:
  const ::Quix::Process::ParameterDataRawProto_NumericValues& _internal_numeric_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_NumericValues* _internal_add_numeric_values();
  public:
  const ::Quix::Process::ParameterDataRawProto_NumericValues& numeric_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_NumericValues* add_numeric_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_NumericValues >&
      numeric_values() const;

  // repeated .Quix.Process.ParameterDataRawProto.StringValues string_values = 4;
  int string_values_size() const;
  private:
  int _internal_string_values_size() const;
  public:
  void clear_string_values();
  ::Quix::Process::ParameterDataRawProto_StringValues* mutable_string_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >*
      mutable_string_values();
  private:
  const ::Quix::Process::ParameterDataRawProto_StringValues& _internal_string_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_StringValues* _internal_add_string_values();
  public:
  const ::Quix::Process::ParameterDataRawProto_StringValues& string_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_StringValues* add_string_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >&
      string_values() const;

  // repeated .Quix.Process.ParameterDataRawProto.BinaryValues binary_values = 5;
  int binary_values_size() const;
  private:
  int _internal_binary_values_size() const;
  public:
  void clear_binary_values();
  ::Quix::Process::ParameterDataRawProto_BinaryValues* mutable_binary_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_BinaryValues >*
      mutable_binary_values();
  private:
  const ::Quix::Process::ParameterDataRawProto_BinaryValues& _internal_binary_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_BinaryValues* _internal_add_binary_values();
  public:
  const ::Quix::Process::ParameterDataRawProto_BinaryValues& binary_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_BinaryValues* add_binary_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_BinaryValues >&
      binary_values() const;

  // repeated .Quix.Process.ParameterDataRawProto.StringValues tag_values = 6;
  int tag_values_size() const;
  private:
  int _internal_tag_values_size() const;
  public:
  void clear_tag_values();
  ::Quix::Process::ParameterDataRawProto_StringValues* mutable_tag_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >*
      mutable_tag_values();
  private:
  const ::Quix::Process::ParameterDataRawProto_StringValues& _internal_tag_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_StringValues* _internal_add_tag_values();
  public:
  const ::Quix::Process::ParameterDataRawProto_StringValues& tag_values(int index) const;
  ::Quix::Process::ParameterDataRawProto_StringValues* add_tag_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >&
      tag_values() const;

  // int64 epoch = 1;
  void clear_epoch();
  int64_t epoch() const;
  void set_epoch(int64_t value);
  private:
  int64_t _internal_epoch() const;
  void _internal_set_epoch(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDataRawProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > timestamps_;
  mutable std::atomic<int> _timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_NumericValues > numeric_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues > string_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_BinaryValues > binary_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues > tag_values_;
  int64_t epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameterDataRawProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParameterDataRawProto_NumericValues

// string header = 1;
inline void ParameterDataRawProto_NumericValues::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& ParameterDataRawProto_NumericValues::header() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.NumericValues.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterDataRawProto_NumericValues::set_header(ArgT0&& arg0, ArgT... args) {
 
 header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.NumericValues.header)
}
inline std::string* ParameterDataRawProto_NumericValues::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.NumericValues.header)
  return _s;
}
inline const std::string& ParameterDataRawProto_NumericValues::_internal_header() const {
  return header_.Get();
}
inline void ParameterDataRawProto_NumericValues::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_NumericValues::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_NumericValues::release_header() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDataRawProto.NumericValues.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParameterDataRawProto_NumericValues::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDataRawProto.NumericValues.header)
}

// repeated bool isnull = 2;
inline int ParameterDataRawProto_NumericValues::_internal_isnull_size() const {
  return isnull_.size();
}
inline int ParameterDataRawProto_NumericValues::isnull_size() const {
  return _internal_isnull_size();
}
inline void ParameterDataRawProto_NumericValues::clear_isnull() {
  isnull_.Clear();
}
inline bool ParameterDataRawProto_NumericValues::_internal_isnull(int index) const {
  return isnull_.Get(index);
}
inline bool ParameterDataRawProto_NumericValues::isnull(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.NumericValues.isnull)
  return _internal_isnull(index);
}
inline void ParameterDataRawProto_NumericValues::set_isnull(int index, bool value) {
  isnull_.Set(index, value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.NumericValues.isnull)
}
inline void ParameterDataRawProto_NumericValues::_internal_add_isnull(bool value) {
  isnull_.Add(value);
}
inline void ParameterDataRawProto_NumericValues::add_isnull(bool value) {
  _internal_add_isnull(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.NumericValues.isnull)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_NumericValues::_internal_isnull() const {
  return isnull_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_NumericValues::isnull() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.NumericValues.isnull)
  return _internal_isnull();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_NumericValues::_internal_mutable_isnull() {
  return &isnull_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_NumericValues::mutable_isnull() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.NumericValues.isnull)
  return _internal_mutable_isnull();
}

// repeated double values = 3;
inline int ParameterDataRawProto_NumericValues::_internal_values_size() const {
  return values_.size();
}
inline int ParameterDataRawProto_NumericValues::values_size() const {
  return _internal_values_size();
}
inline void ParameterDataRawProto_NumericValues::clear_values() {
  values_.Clear();
}
inline double ParameterDataRawProto_NumericValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline double ParameterDataRawProto_NumericValues::values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.NumericValues.values)
  return _internal_values(index);
}
inline void ParameterDataRawProto_NumericValues::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.NumericValues.values)
}
inline void ParameterDataRawProto_NumericValues::_internal_add_values(double value) {
  values_.Add(value);
}
inline void ParameterDataRawProto_NumericValues::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.NumericValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ParameterDataRawProto_NumericValues::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ParameterDataRawProto_NumericValues::values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.NumericValues.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ParameterDataRawProto_NumericValues::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ParameterDataRawProto_NumericValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.NumericValues.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// ParameterDataRawProto_StringValues

// string header = 1;
inline void ParameterDataRawProto_StringValues::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& ParameterDataRawProto_StringValues::header() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.StringValues.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterDataRawProto_StringValues::set_header(ArgT0&& arg0, ArgT... args) {
 
 header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.StringValues.header)
}
inline std::string* ParameterDataRawProto_StringValues::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.StringValues.header)
  return _s;
}
inline const std::string& ParameterDataRawProto_StringValues::_internal_header() const {
  return header_.Get();
}
inline void ParameterDataRawProto_StringValues::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_StringValues::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_StringValues::release_header() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDataRawProto.StringValues.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParameterDataRawProto_StringValues::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDataRawProto.StringValues.header)
}

// repeated bool isnull = 2;
inline int ParameterDataRawProto_StringValues::_internal_isnull_size() const {
  return isnull_.size();
}
inline int ParameterDataRawProto_StringValues::isnull_size() const {
  return _internal_isnull_size();
}
inline void ParameterDataRawProto_StringValues::clear_isnull() {
  isnull_.Clear();
}
inline bool ParameterDataRawProto_StringValues::_internal_isnull(int index) const {
  return isnull_.Get(index);
}
inline bool ParameterDataRawProto_StringValues::isnull(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.StringValues.isnull)
  return _internal_isnull(index);
}
inline void ParameterDataRawProto_StringValues::set_isnull(int index, bool value) {
  isnull_.Set(index, value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.StringValues.isnull)
}
inline void ParameterDataRawProto_StringValues::_internal_add_isnull(bool value) {
  isnull_.Add(value);
}
inline void ParameterDataRawProto_StringValues::add_isnull(bool value) {
  _internal_add_isnull(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.StringValues.isnull)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_StringValues::_internal_isnull() const {
  return isnull_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_StringValues::isnull() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.StringValues.isnull)
  return _internal_isnull();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_StringValues::_internal_mutable_isnull() {
  return &isnull_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_StringValues::mutable_isnull() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.StringValues.isnull)
  return _internal_mutable_isnull();
}

// repeated string values = 3;
inline int ParameterDataRawProto_StringValues::_internal_values_size() const {
  return values_.size();
}
inline int ParameterDataRawProto_StringValues::values_size() const {
  return _internal_values_size();
}
inline void ParameterDataRawProto_StringValues::clear_values() {
  values_.Clear();
}
inline std::string* ParameterDataRawProto_StringValues::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:Quix.Process.ParameterDataRawProto.StringValues.values)
  return _s;
}
inline const std::string& ParameterDataRawProto_StringValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& ParameterDataRawProto_StringValues::values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.StringValues.values)
  return _internal_values(index);
}
inline std::string* ParameterDataRawProto_StringValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.StringValues.values)
  return values_.Mutable(index);
}
inline void ParameterDataRawProto_StringValues::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline std::string* ParameterDataRawProto_StringValues::_internal_add_values() {
  return values_.Add();
}
inline void ParameterDataRawProto_StringValues::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline void ParameterDataRawProto_StringValues::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Quix.Process.ParameterDataRawProto.StringValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ParameterDataRawProto_StringValues::values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.StringValues.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ParameterDataRawProto_StringValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.StringValues.values)
  return &values_;
}

// -------------------------------------------------------------------

// ParameterDataRawProto_BinaryValues

// string header = 1;
inline void ParameterDataRawProto_BinaryValues::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& ParameterDataRawProto_BinaryValues::header() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.BinaryValues.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterDataRawProto_BinaryValues::set_header(ArgT0&& arg0, ArgT... args) {
 
 header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.BinaryValues.header)
}
inline std::string* ParameterDataRawProto_BinaryValues::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.BinaryValues.header)
  return _s;
}
inline const std::string& ParameterDataRawProto_BinaryValues::_internal_header() const {
  return header_.Get();
}
inline void ParameterDataRawProto_BinaryValues::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_BinaryValues::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDataRawProto_BinaryValues::release_header() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDataRawProto.BinaryValues.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParameterDataRawProto_BinaryValues::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDataRawProto.BinaryValues.header)
}

// repeated bool isnull = 2;
inline int ParameterDataRawProto_BinaryValues::_internal_isnull_size() const {
  return isnull_.size();
}
inline int ParameterDataRawProto_BinaryValues::isnull_size() const {
  return _internal_isnull_size();
}
inline void ParameterDataRawProto_BinaryValues::clear_isnull() {
  isnull_.Clear();
}
inline bool ParameterDataRawProto_BinaryValues::_internal_isnull(int index) const {
  return isnull_.Get(index);
}
inline bool ParameterDataRawProto_BinaryValues::isnull(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.BinaryValues.isnull)
  return _internal_isnull(index);
}
inline void ParameterDataRawProto_BinaryValues::set_isnull(int index, bool value) {
  isnull_.Set(index, value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.BinaryValues.isnull)
}
inline void ParameterDataRawProto_BinaryValues::_internal_add_isnull(bool value) {
  isnull_.Add(value);
}
inline void ParameterDataRawProto_BinaryValues::add_isnull(bool value) {
  _internal_add_isnull(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.BinaryValues.isnull)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_BinaryValues::_internal_isnull() const {
  return isnull_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParameterDataRawProto_BinaryValues::isnull() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.BinaryValues.isnull)
  return _internal_isnull();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_BinaryValues::_internal_mutable_isnull() {
  return &isnull_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParameterDataRawProto_BinaryValues::mutable_isnull() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.BinaryValues.isnull)
  return _internal_mutable_isnull();
}

// repeated bytes values = 3;
inline int ParameterDataRawProto_BinaryValues::_internal_values_size() const {
  return values_.size();
}
inline int ParameterDataRawProto_BinaryValues::values_size() const {
  return _internal_values_size();
}
inline void ParameterDataRawProto_BinaryValues::clear_values() {
  values_.Clear();
}
inline std::string* ParameterDataRawProto_BinaryValues::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:Quix.Process.ParameterDataRawProto.BinaryValues.values)
  return _s;
}
inline const std::string& ParameterDataRawProto_BinaryValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& ParameterDataRawProto_BinaryValues::values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.BinaryValues.values)
  return _internal_values(index);
}
inline std::string* ParameterDataRawProto_BinaryValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.BinaryValues.values)
  return values_.Mutable(index);
}
inline void ParameterDataRawProto_BinaryValues::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline std::string* ParameterDataRawProto_BinaryValues::_internal_add_values() {
  return values_.Add();
}
inline void ParameterDataRawProto_BinaryValues::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline void ParameterDataRawProto_BinaryValues::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Quix.Process.ParameterDataRawProto.BinaryValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ParameterDataRawProto_BinaryValues::values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.BinaryValues.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ParameterDataRawProto_BinaryValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.BinaryValues.values)
  return &values_;
}

// -------------------------------------------------------------------

// ParameterDataRawProto

// int64 epoch = 1;
inline void ParameterDataRawProto::clear_epoch() {
  epoch_ = int64_t{0};
}
inline int64_t ParameterDataRawProto::_internal_epoch() const {
  return epoch_;
}
inline int64_t ParameterDataRawProto::epoch() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.epoch)
  return _internal_epoch();
}
inline void ParameterDataRawProto::_internal_set_epoch(int64_t value) {
  
  epoch_ = value;
}
inline void ParameterDataRawProto::set_epoch(int64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.epoch)
}

// repeated int64 timestamps = 2;
inline int ParameterDataRawProto::_internal_timestamps_size() const {
  return timestamps_.size();
}
inline int ParameterDataRawProto::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void ParameterDataRawProto::clear_timestamps() {
  timestamps_.Clear();
}
inline int64_t ParameterDataRawProto::_internal_timestamps(int index) const {
  return timestamps_.Get(index);
}
inline int64_t ParameterDataRawProto::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.timestamps)
  return _internal_timestamps(index);
}
inline void ParameterDataRawProto::set_timestamps(int index, int64_t value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDataRawProto.timestamps)
}
inline void ParameterDataRawProto::_internal_add_timestamps(int64_t value) {
  timestamps_.Add(value);
}
inline void ParameterDataRawProto::add_timestamps(int64_t value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ParameterDataRawProto::_internal_timestamps() const {
  return timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ParameterDataRawProto::timestamps() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ParameterDataRawProto::_internal_mutable_timestamps() {
  return &timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ParameterDataRawProto::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.timestamps)
  return _internal_mutable_timestamps();
}

// repeated .Quix.Process.ParameterDataRawProto.NumericValues numeric_values = 3;
inline int ParameterDataRawProto::_internal_numeric_values_size() const {
  return numeric_values_.size();
}
inline int ParameterDataRawProto::numeric_values_size() const {
  return _internal_numeric_values_size();
}
inline void ParameterDataRawProto::clear_numeric_values() {
  numeric_values_.Clear();
}
inline ::Quix::Process::ParameterDataRawProto_NumericValues* ParameterDataRawProto::mutable_numeric_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.numeric_values)
  return numeric_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_NumericValues >*
ParameterDataRawProto::mutable_numeric_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.numeric_values)
  return &numeric_values_;
}
inline const ::Quix::Process::ParameterDataRawProto_NumericValues& ParameterDataRawProto::_internal_numeric_values(int index) const {
  return numeric_values_.Get(index);
}
inline const ::Quix::Process::ParameterDataRawProto_NumericValues& ParameterDataRawProto::numeric_values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.numeric_values)
  return _internal_numeric_values(index);
}
inline ::Quix::Process::ParameterDataRawProto_NumericValues* ParameterDataRawProto::_internal_add_numeric_values() {
  return numeric_values_.Add();
}
inline ::Quix::Process::ParameterDataRawProto_NumericValues* ParameterDataRawProto::add_numeric_values() {
  ::Quix::Process::ParameterDataRawProto_NumericValues* _add = _internal_add_numeric_values();
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.numeric_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_NumericValues >&
ParameterDataRawProto::numeric_values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.numeric_values)
  return numeric_values_;
}

// repeated .Quix.Process.ParameterDataRawProto.StringValues string_values = 4;
inline int ParameterDataRawProto::_internal_string_values_size() const {
  return string_values_.size();
}
inline int ParameterDataRawProto::string_values_size() const {
  return _internal_string_values_size();
}
inline void ParameterDataRawProto::clear_string_values() {
  string_values_.Clear();
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::mutable_string_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.string_values)
  return string_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >*
ParameterDataRawProto::mutable_string_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.string_values)
  return &string_values_;
}
inline const ::Quix::Process::ParameterDataRawProto_StringValues& ParameterDataRawProto::_internal_string_values(int index) const {
  return string_values_.Get(index);
}
inline const ::Quix::Process::ParameterDataRawProto_StringValues& ParameterDataRawProto::string_values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.string_values)
  return _internal_string_values(index);
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::_internal_add_string_values() {
  return string_values_.Add();
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::add_string_values() {
  ::Quix::Process::ParameterDataRawProto_StringValues* _add = _internal_add_string_values();
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.string_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >&
ParameterDataRawProto::string_values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.string_values)
  return string_values_;
}

// repeated .Quix.Process.ParameterDataRawProto.BinaryValues binary_values = 5;
inline int ParameterDataRawProto::_internal_binary_values_size() const {
  return binary_values_.size();
}
inline int ParameterDataRawProto::binary_values_size() const {
  return _internal_binary_values_size();
}
inline void ParameterDataRawProto::clear_binary_values() {
  binary_values_.Clear();
}
inline ::Quix::Process::ParameterDataRawProto_BinaryValues* ParameterDataRawProto::mutable_binary_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.binary_values)
  return binary_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_BinaryValues >*
ParameterDataRawProto::mutable_binary_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.binary_values)
  return &binary_values_;
}
inline const ::Quix::Process::ParameterDataRawProto_BinaryValues& ParameterDataRawProto::_internal_binary_values(int index) const {
  return binary_values_.Get(index);
}
inline const ::Quix::Process::ParameterDataRawProto_BinaryValues& ParameterDataRawProto::binary_values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.binary_values)
  return _internal_binary_values(index);
}
inline ::Quix::Process::ParameterDataRawProto_BinaryValues* ParameterDataRawProto::_internal_add_binary_values() {
  return binary_values_.Add();
}
inline ::Quix::Process::ParameterDataRawProto_BinaryValues* ParameterDataRawProto::add_binary_values() {
  ::Quix::Process::ParameterDataRawProto_BinaryValues* _add = _internal_add_binary_values();
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.binary_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_BinaryValues >&
ParameterDataRawProto::binary_values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.binary_values)
  return binary_values_;
}

// repeated .Quix.Process.ParameterDataRawProto.StringValues tag_values = 6;
inline int ParameterDataRawProto::_internal_tag_values_size() const {
  return tag_values_.size();
}
inline int ParameterDataRawProto::tag_values_size() const {
  return _internal_tag_values_size();
}
inline void ParameterDataRawProto::clear_tag_values() {
  tag_values_.Clear();
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::mutable_tag_values(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDataRawProto.tag_values)
  return tag_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >*
ParameterDataRawProto::mutable_tag_values() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDataRawProto.tag_values)
  return &tag_values_;
}
inline const ::Quix::Process::ParameterDataRawProto_StringValues& ParameterDataRawProto::_internal_tag_values(int index) const {
  return tag_values_.Get(index);
}
inline const ::Quix::Process::ParameterDataRawProto_StringValues& ParameterDataRawProto::tag_values(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDataRawProto.tag_values)
  return _internal_tag_values(index);
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::_internal_add_tag_values() {
  return tag_values_.Add();
}
inline ::Quix::Process::ParameterDataRawProto_StringValues* ParameterDataRawProto::add_tag_values() {
  ::Quix::Process::ParameterDataRawProto_StringValues* _add = _internal_add_tag_values();
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDataRawProto.tag_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDataRawProto_StringValues >&
ParameterDataRawProto::tag_values() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDataRawProto.tag_values)
  return tag_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Process
}  // namespace Quix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parameterDataRawProto_2eproto
