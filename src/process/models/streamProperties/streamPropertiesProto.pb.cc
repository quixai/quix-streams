// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamPropertiesProto.proto

#include "streamPropertiesProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Quix {
namespace Process {
constexpr StreamPropertiesProto_MetadataEntry_DoNotUse::StreamPropertiesProto_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamPropertiesProto_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamPropertiesProto_MetadataEntry_DoNotUseDefaultTypeInternal _StreamPropertiesProto_MetadataEntry_DoNotUse_default_instance_;
constexpr StreamPropertiesProto::StreamPropertiesProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , parents_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct StreamPropertiesProtoDefaultTypeInternal {
  constexpr StreamPropertiesProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamPropertiesProtoDefaultTypeInternal() {}
  union {
    StreamPropertiesProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamPropertiesProtoDefaultTypeInternal _StreamPropertiesProto_default_instance_;
}  // namespace Process
}  // namespace Quix
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_streamPropertiesProto_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_streamPropertiesProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_streamPropertiesProto_2eproto = nullptr;

const uint32_t TableStruct_streamPropertiesProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, name_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, location_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, parents_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Quix::Process::StreamPropertiesProto, timeOfRecording_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::Quix::Process::StreamPropertiesProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_StreamPropertiesProto_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_StreamPropertiesProto_default_instance_),
};

const char descriptor_table_protodef_streamPropertiesProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033streamPropertiesProto.proto\022\014Quix.Proc"
  "ess\"\222\002\n\025StreamPropertiesProto\022\014\n\004name\030\001 "
  "\001(\t\022\020\n\010location\030\002 \001(\t\022C\n\010metadata\030\003 \003(\0132"
  "1.Quix.Process.StreamPropertiesProto.Met"
  "adataEntry\022\017\n\007parents\030\004 \003(\t\022\036\n\024timeOfRec"
  "ording_null\030\005 \001(\010H\000\022\037\n\025timeOfRecording_v"
  "alue\030\006 \001(\003H\000\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\021\n\017timeOfRecording"
  "B!\252\002\036Quix.Sdk.Process.Models.Codecsb\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_streamPropertiesProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streamPropertiesProto_2eproto = {
  false, false, 363, descriptor_table_protodef_streamPropertiesProto_2eproto, "streamPropertiesProto.proto", 
  &descriptor_table_streamPropertiesProto_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_streamPropertiesProto_2eproto::offsets,
  file_level_metadata_streamPropertiesProto_2eproto, file_level_enum_descriptors_streamPropertiesProto_2eproto, file_level_service_descriptors_streamPropertiesProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_streamPropertiesProto_2eproto_getter() {
  return &descriptor_table_streamPropertiesProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_streamPropertiesProto_2eproto(&descriptor_table_streamPropertiesProto_2eproto);
namespace Quix {
namespace Process {

// ===================================================================

StreamPropertiesProto_MetadataEntry_DoNotUse::StreamPropertiesProto_MetadataEntry_DoNotUse() {}
StreamPropertiesProto_MetadataEntry_DoNotUse::StreamPropertiesProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamPropertiesProto_MetadataEntry_DoNotUse::MergeFrom(const StreamPropertiesProto_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamPropertiesProto_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streamPropertiesProto_2eproto_getter, &descriptor_table_streamPropertiesProto_2eproto_once,
      file_level_metadata_streamPropertiesProto_2eproto[0]);
}

// ===================================================================

class StreamPropertiesProto::_Internal {
 public:
};

StreamPropertiesProto::StreamPropertiesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena),
  parents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Process.StreamPropertiesProto)
}
StreamPropertiesProto::StreamPropertiesProto(const StreamPropertiesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  clear_has_timeOfRecording();
  switch (from.timeOfRecording_case()) {
    case kTimeOfRecordingNull: {
      _internal_set_timeofrecording_null(from._internal_timeofrecording_null());
      break;
    }
    case kTimeOfRecordingValue: {
      _internal_set_timeofrecording_value(from._internal_timeofrecording_value());
      break;
    }
    case TIMEOFRECORDING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Quix.Process.StreamPropertiesProto)
}

inline void StreamPropertiesProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_timeOfRecording();
}

StreamPropertiesProto::~StreamPropertiesProto() {
  // @@protoc_insertion_point(destructor:Quix.Process.StreamPropertiesProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamPropertiesProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_timeOfRecording()) {
    clear_timeOfRecording();
  }
}

void StreamPropertiesProto::ArenaDtor(void* object) {
  StreamPropertiesProto* _this = reinterpret_cast< StreamPropertiesProto* >(object);
  (void)_this;
  _this->metadata_. ~MapField();
}
inline void StreamPropertiesProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StreamPropertiesProto::ArenaDtor);
  }
}
void StreamPropertiesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamPropertiesProto::clear_timeOfRecording() {
// @@protoc_insertion_point(one_of_clear_start:Quix.Process.StreamPropertiesProto)
  switch (timeOfRecording_case()) {
    case kTimeOfRecordingNull: {
      // No need to clear
      break;
    }
    case kTimeOfRecordingValue: {
      // No need to clear
      break;
    }
    case TIMEOFRECORDING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIMEOFRECORDING_NOT_SET;
}


void StreamPropertiesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Process.StreamPropertiesProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  parents_.Clear();
  name_.ClearToEmpty();
  location_.ClearToEmpty();
  clear_timeOfRecording();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPropertiesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.StreamPropertiesProto.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.StreamPropertiesProto.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string parents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.StreamPropertiesProto.parents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool timeOfRecording_null = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_timeofrecording_null(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeOfRecording_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_timeofrecording_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamPropertiesProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Process.StreamPropertiesProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.StreamPropertiesProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string location = 2;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.StreamPropertiesProto.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Quix.Process.StreamPropertiesProto.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Quix.Process.StreamPropertiesProto.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamPropertiesProto_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = StreamPropertiesProto_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string parents = 4;
  for (int i = 0, n = this->_internal_parents_size(); i < n; i++) {
    const auto& s = this->_internal_parents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.StreamPropertiesProto.parents");
    target = stream->WriteString(4, s, target);
  }

  // bool timeOfRecording_null = 5;
  if (_internal_has_timeofrecording_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_timeofrecording_null(), target);
  }

  // int64 timeOfRecording_value = 6;
  if (_internal_has_timeofrecording_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timeofrecording_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Process.StreamPropertiesProto)
  return target;
}

size_t StreamPropertiesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Process.StreamPropertiesProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += StreamPropertiesProto_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string parents = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(parents_.size());
  for (int i = 0, n = parents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      parents_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string location = 2;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  switch (timeOfRecording_case()) {
    // bool timeOfRecording_null = 5;
    case kTimeOfRecordingNull: {
      total_size += 1 + 1;
      break;
    }
    // int64 timeOfRecording_value = 6;
    case kTimeOfRecordingValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeofrecording_value());
      break;
    }
    case TIMEOFRECORDING_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPropertiesProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamPropertiesProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPropertiesProto::GetClassData() const { return &_class_data_; }

void StreamPropertiesProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamPropertiesProto *>(to)->MergeFrom(
      static_cast<const StreamPropertiesProto &>(from));
}


void StreamPropertiesProto::MergeFrom(const StreamPropertiesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Process.StreamPropertiesProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  parents_.MergeFrom(from.parents_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  switch (from.timeOfRecording_case()) {
    case kTimeOfRecordingNull: {
      _internal_set_timeofrecording_null(from._internal_timeofrecording_null());
      break;
    }
    case kTimeOfRecordingValue: {
      _internal_set_timeofrecording_value(from._internal_timeofrecording_value());
      break;
    }
    case TIMEOFRECORDING_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPropertiesProto::CopyFrom(const StreamPropertiesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Process.StreamPropertiesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPropertiesProto::IsInitialized() const {
  return true;
}

void StreamPropertiesProto::InternalSwap(StreamPropertiesProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  parents_.InternalSwap(&other->parents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  swap(timeOfRecording_, other->timeOfRecording_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPropertiesProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streamPropertiesProto_2eproto_getter, &descriptor_table_streamPropertiesProto_2eproto_once,
      file_level_metadata_streamPropertiesProto_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::StreamPropertiesProto_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Quix::Process::StreamPropertiesProto* Arena::CreateMaybeMessage< ::Quix::Process::StreamPropertiesProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::StreamPropertiesProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
