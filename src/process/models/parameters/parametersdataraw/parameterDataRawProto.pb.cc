// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameterDataRawProto.proto

#include "parameterDataRawProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Quix {
namespace Process {
constexpr ParameterDataRawProto_NumericValues::ParameterDataRawProto_NumericValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isnull_()
  , values_()
  , header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParameterDataRawProto_NumericValuesDefaultTypeInternal {
  constexpr ParameterDataRawProto_NumericValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDataRawProto_NumericValuesDefaultTypeInternal() {}
  union {
    ParameterDataRawProto_NumericValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDataRawProto_NumericValuesDefaultTypeInternal _ParameterDataRawProto_NumericValues_default_instance_;
constexpr ParameterDataRawProto_StringValues::ParameterDataRawProto_StringValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isnull_()
  , values_()
  , header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParameterDataRawProto_StringValuesDefaultTypeInternal {
  constexpr ParameterDataRawProto_StringValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDataRawProto_StringValuesDefaultTypeInternal() {}
  union {
    ParameterDataRawProto_StringValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDataRawProto_StringValuesDefaultTypeInternal _ParameterDataRawProto_StringValues_default_instance_;
constexpr ParameterDataRawProto_BinaryValues::ParameterDataRawProto_BinaryValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isnull_()
  , values_()
  , header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParameterDataRawProto_BinaryValuesDefaultTypeInternal {
  constexpr ParameterDataRawProto_BinaryValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDataRawProto_BinaryValuesDefaultTypeInternal() {}
  union {
    ParameterDataRawProto_BinaryValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDataRawProto_BinaryValuesDefaultTypeInternal _ParameterDataRawProto_BinaryValues_default_instance_;
constexpr ParameterDataRawProto::ParameterDataRawProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamps_()
  , _timestamps_cached_byte_size_(0)
  , numeric_values_()
  , string_values_()
  , binary_values_()
  , tag_values_()
  , epoch_(int64_t{0}){}
struct ParameterDataRawProtoDefaultTypeInternal {
  constexpr ParameterDataRawProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDataRawProtoDefaultTypeInternal() {}
  union {
    ParameterDataRawProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDataRawProtoDefaultTypeInternal _ParameterDataRawProto_default_instance_;
}  // namespace Process
}  // namespace Quix
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parameterDataRawProto_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_parameterDataRawProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parameterDataRawProto_2eproto = nullptr;

const uint32_t TableStruct_parameterDataRawProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_NumericValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_NumericValues, header_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_NumericValues, isnull_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_NumericValues, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_StringValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_StringValues, header_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_StringValues, isnull_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_StringValues, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_BinaryValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_BinaryValues, header_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_BinaryValues, isnull_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto_BinaryValues, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, epoch_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, timestamps_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, numeric_values_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, string_values_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, binary_values_),
  PROTOBUF_FIELD_OFFSET(::Quix::Process::ParameterDataRawProto, tag_values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Quix::Process::ParameterDataRawProto_NumericValues)},
  { 9, -1, -1, sizeof(::Quix::Process::ParameterDataRawProto_StringValues)},
  { 18, -1, -1, sizeof(::Quix::Process::ParameterDataRawProto_BinaryValues)},
  { 27, -1, -1, sizeof(::Quix::Process::ParameterDataRawProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_ParameterDataRawProto_NumericValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_ParameterDataRawProto_StringValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_ParameterDataRawProto_BinaryValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Quix::Process::_ParameterDataRawProto_default_instance_),
};

const char descriptor_table_protodef_parameterDataRawProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033parameterDataRawProto.proto\022\014Quix.Proc"
  "ess\"\236\004\n\025ParameterDataRawProto\022\r\n\005epoch\030\001"
  " \001(\003\022\022\n\ntimestamps\030\002 \003(\003\022I\n\016numeric_valu"
  "es\030\003 \003(\01321.Quix.Process.ParameterDataRaw"
  "Proto.NumericValues\022G\n\rstring_values\030\004 \003"
  "(\01320.Quix.Process.ParameterDataRawProto."
  "StringValues\022G\n\rbinary_values\030\005 \003(\01320.Qu"
  "ix.Process.ParameterDataRawProto.BinaryV"
  "alues\022D\n\ntag_values\030\006 \003(\01320.Quix.Process"
  ".ParameterDataRawProto.StringValues\032\?\n\rN"
  "umericValues\022\016\n\006header\030\001 \001(\t\022\016\n\006isnull\030\002"
  " \003(\010\022\016\n\006values\030\003 \003(\001\032>\n\014StringValues\022\016\n\006"
  "header\030\001 \001(\t\022\016\n\006isnull\030\002 \003(\010\022\016\n\006values\030\003"
  " \003(\t\032>\n\014BinaryValues\022\016\n\006header\030\001 \001(\t\022\016\n\006"
  "isnull\030\002 \003(\010\022\016\n\006values\030\003 \003(\014B!\252\002\036Quix.Sd"
  "k.Process.Models.Codecsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parameterDataRawProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parameterDataRawProto_2eproto = {
  false, false, 631, descriptor_table_protodef_parameterDataRawProto_2eproto, "parameterDataRawProto.proto", 
  &descriptor_table_parameterDataRawProto_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_parameterDataRawProto_2eproto::offsets,
  file_level_metadata_parameterDataRawProto_2eproto, file_level_enum_descriptors_parameterDataRawProto_2eproto, file_level_service_descriptors_parameterDataRawProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_parameterDataRawProto_2eproto_getter() {
  return &descriptor_table_parameterDataRawProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_parameterDataRawProto_2eproto(&descriptor_table_parameterDataRawProto_2eproto);
namespace Quix {
namespace Process {

// ===================================================================

class ParameterDataRawProto_NumericValues::_Internal {
 public:
};

ParameterDataRawProto_NumericValues::ParameterDataRawProto_NumericValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  isnull_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Process.ParameterDataRawProto.NumericValues)
}
ParameterDataRawProto_NumericValues::ParameterDataRawProto_NumericValues(const ParameterDataRawProto_NumericValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      isnull_(from.isnull_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Quix.Process.ParameterDataRawProto.NumericValues)
}

inline void ParameterDataRawProto_NumericValues::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParameterDataRawProto_NumericValues::~ParameterDataRawProto_NumericValues() {
  // @@protoc_insertion_point(destructor:Quix.Process.ParameterDataRawProto.NumericValues)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParameterDataRawProto_NumericValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParameterDataRawProto_NumericValues::ArenaDtor(void* object) {
  ParameterDataRawProto_NumericValues* _this = reinterpret_cast< ParameterDataRawProto_NumericValues* >(object);
  (void)_this;
}
void ParameterDataRawProto_NumericValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterDataRawProto_NumericValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParameterDataRawProto_NumericValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Process.ParameterDataRawProto.NumericValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isnull_.Clear();
  values_.Clear();
  header_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterDataRawProto_NumericValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.ParameterDataRawProto.NumericValues.header"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool isnull = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_isnull(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_isnull(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterDataRawProto_NumericValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Process.ParameterDataRawProto.NumericValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.ParameterDataRawProto.NumericValues.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // repeated bool isnull = 2;
  if (this->_internal_isnull_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_isnull(), target);
  }

  // repeated double values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Process.ParameterDataRawProto.NumericValues)
  return target;
}

size_t ParameterDataRawProto_NumericValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Process.ParameterDataRawProto.NumericValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool isnull = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_isnull_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterDataRawProto_NumericValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterDataRawProto_NumericValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterDataRawProto_NumericValues::GetClassData() const { return &_class_data_; }

void ParameterDataRawProto_NumericValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParameterDataRawProto_NumericValues *>(to)->MergeFrom(
      static_cast<const ParameterDataRawProto_NumericValues &>(from));
}


void ParameterDataRawProto_NumericValues::MergeFrom(const ParameterDataRawProto_NumericValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Process.ParameterDataRawProto.NumericValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  isnull_.MergeFrom(from.isnull_);
  values_.MergeFrom(from.values_);
  if (!from._internal_header().empty()) {
    _internal_set_header(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterDataRawProto_NumericValues::CopyFrom(const ParameterDataRawProto_NumericValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Process.ParameterDataRawProto.NumericValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDataRawProto_NumericValues::IsInitialized() const {
  return true;
}

void ParameterDataRawProto_NumericValues::InternalSwap(ParameterDataRawProto_NumericValues* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  isnull_.InternalSwap(&other->isnull_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_, lhs_arena,
      &other->header_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterDataRawProto_NumericValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parameterDataRawProto_2eproto_getter, &descriptor_table_parameterDataRawProto_2eproto_once,
      file_level_metadata_parameterDataRawProto_2eproto[0]);
}

// ===================================================================

class ParameterDataRawProto_StringValues::_Internal {
 public:
};

ParameterDataRawProto_StringValues::ParameterDataRawProto_StringValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  isnull_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Process.ParameterDataRawProto.StringValues)
}
ParameterDataRawProto_StringValues::ParameterDataRawProto_StringValues(const ParameterDataRawProto_StringValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      isnull_(from.isnull_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Quix.Process.ParameterDataRawProto.StringValues)
}

inline void ParameterDataRawProto_StringValues::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParameterDataRawProto_StringValues::~ParameterDataRawProto_StringValues() {
  // @@protoc_insertion_point(destructor:Quix.Process.ParameterDataRawProto.StringValues)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParameterDataRawProto_StringValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParameterDataRawProto_StringValues::ArenaDtor(void* object) {
  ParameterDataRawProto_StringValues* _this = reinterpret_cast< ParameterDataRawProto_StringValues* >(object);
  (void)_this;
}
void ParameterDataRawProto_StringValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterDataRawProto_StringValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParameterDataRawProto_StringValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Process.ParameterDataRawProto.StringValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isnull_.Clear();
  values_.Clear();
  header_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterDataRawProto_StringValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.ParameterDataRawProto.StringValues.header"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool isnull = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_isnull(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_isnull(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.ParameterDataRawProto.StringValues.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterDataRawProto_StringValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Process.ParameterDataRawProto.StringValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.ParameterDataRawProto.StringValues.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // repeated bool isnull = 2;
  if (this->_internal_isnull_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_isnull(), target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.ParameterDataRawProto.StringValues.values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Process.ParameterDataRawProto.StringValues)
  return target;
}

size_t ParameterDataRawProto_StringValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Process.ParameterDataRawProto.StringValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool isnull = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_isnull_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // string header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterDataRawProto_StringValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterDataRawProto_StringValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterDataRawProto_StringValues::GetClassData() const { return &_class_data_; }

void ParameterDataRawProto_StringValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParameterDataRawProto_StringValues *>(to)->MergeFrom(
      static_cast<const ParameterDataRawProto_StringValues &>(from));
}


void ParameterDataRawProto_StringValues::MergeFrom(const ParameterDataRawProto_StringValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Process.ParameterDataRawProto.StringValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  isnull_.MergeFrom(from.isnull_);
  values_.MergeFrom(from.values_);
  if (!from._internal_header().empty()) {
    _internal_set_header(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterDataRawProto_StringValues::CopyFrom(const ParameterDataRawProto_StringValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Process.ParameterDataRawProto.StringValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDataRawProto_StringValues::IsInitialized() const {
  return true;
}

void ParameterDataRawProto_StringValues::InternalSwap(ParameterDataRawProto_StringValues* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  isnull_.InternalSwap(&other->isnull_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_, lhs_arena,
      &other->header_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterDataRawProto_StringValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parameterDataRawProto_2eproto_getter, &descriptor_table_parameterDataRawProto_2eproto_once,
      file_level_metadata_parameterDataRawProto_2eproto[1]);
}

// ===================================================================

class ParameterDataRawProto_BinaryValues::_Internal {
 public:
};

ParameterDataRawProto_BinaryValues::ParameterDataRawProto_BinaryValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  isnull_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Process.ParameterDataRawProto.BinaryValues)
}
ParameterDataRawProto_BinaryValues::ParameterDataRawProto_BinaryValues(const ParameterDataRawProto_BinaryValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      isnull_(from.isnull_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Quix.Process.ParameterDataRawProto.BinaryValues)
}

inline void ParameterDataRawProto_BinaryValues::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParameterDataRawProto_BinaryValues::~ParameterDataRawProto_BinaryValues() {
  // @@protoc_insertion_point(destructor:Quix.Process.ParameterDataRawProto.BinaryValues)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParameterDataRawProto_BinaryValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParameterDataRawProto_BinaryValues::ArenaDtor(void* object) {
  ParameterDataRawProto_BinaryValues* _this = reinterpret_cast< ParameterDataRawProto_BinaryValues* >(object);
  (void)_this;
}
void ParameterDataRawProto_BinaryValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterDataRawProto_BinaryValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParameterDataRawProto_BinaryValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Process.ParameterDataRawProto.BinaryValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isnull_.Clear();
  values_.Clear();
  header_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterDataRawProto_BinaryValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Quix.Process.ParameterDataRawProto.BinaryValues.header"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool isnull = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_isnull(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_isnull(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterDataRawProto_BinaryValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Process.ParameterDataRawProto.BinaryValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Process.ParameterDataRawProto.BinaryValues.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // repeated bool isnull = 2;
  if (this->_internal_isnull_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_isnull(), target);
  }

  // repeated bytes values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Process.ParameterDataRawProto.BinaryValues)
  return target;
}

size_t ParameterDataRawProto_BinaryValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Process.ParameterDataRawProto.BinaryValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool isnull = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_isnull_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bytes values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // string header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterDataRawProto_BinaryValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterDataRawProto_BinaryValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterDataRawProto_BinaryValues::GetClassData() const { return &_class_data_; }

void ParameterDataRawProto_BinaryValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParameterDataRawProto_BinaryValues *>(to)->MergeFrom(
      static_cast<const ParameterDataRawProto_BinaryValues &>(from));
}


void ParameterDataRawProto_BinaryValues::MergeFrom(const ParameterDataRawProto_BinaryValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Process.ParameterDataRawProto.BinaryValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  isnull_.MergeFrom(from.isnull_);
  values_.MergeFrom(from.values_);
  if (!from._internal_header().empty()) {
    _internal_set_header(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterDataRawProto_BinaryValues::CopyFrom(const ParameterDataRawProto_BinaryValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Process.ParameterDataRawProto.BinaryValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDataRawProto_BinaryValues::IsInitialized() const {
  return true;
}

void ParameterDataRawProto_BinaryValues::InternalSwap(ParameterDataRawProto_BinaryValues* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  isnull_.InternalSwap(&other->isnull_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_, lhs_arena,
      &other->header_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterDataRawProto_BinaryValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parameterDataRawProto_2eproto_getter, &descriptor_table_parameterDataRawProto_2eproto_once,
      file_level_metadata_parameterDataRawProto_2eproto[2]);
}

// ===================================================================

class ParameterDataRawProto::_Internal {
 public:
};

ParameterDataRawProto::ParameterDataRawProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  timestamps_(arena),
  numeric_values_(arena),
  string_values_(arena),
  binary_values_(arena),
  tag_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Process.ParameterDataRawProto)
}
ParameterDataRawProto::ParameterDataRawProto(const ParameterDataRawProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timestamps_(from.timestamps_),
      numeric_values_(from.numeric_values_),
      string_values_(from.string_values_),
      binary_values_(from.binary_values_),
      tag_values_(from.tag_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:Quix.Process.ParameterDataRawProto)
}

inline void ParameterDataRawProto::SharedCtor() {
epoch_ = int64_t{0};
}

ParameterDataRawProto::~ParameterDataRawProto() {
  // @@protoc_insertion_point(destructor:Quix.Process.ParameterDataRawProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParameterDataRawProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParameterDataRawProto::ArenaDtor(void* object) {
  ParameterDataRawProto* _this = reinterpret_cast< ParameterDataRawProto* >(object);
  (void)_this;
}
void ParameterDataRawProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterDataRawProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParameterDataRawProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Process.ParameterDataRawProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  numeric_values_.Clear();
  string_values_.Clear();
  binary_values_.Clear();
  tag_values_.Clear();
  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterDataRawProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 timestamps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Quix.Process.ParameterDataRawProto.NumericValues numeric_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_numeric_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Quix.Process.ParameterDataRawProto.StringValues string_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Quix.Process.ParameterDataRawProto.BinaryValues binary_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Quix.Process.ParameterDataRawProto.StringValues tag_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tag_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterDataRawProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Process.ParameterDataRawProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // repeated int64 timestamps = 2;
  {
    int byte_size = _timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_timestamps(), byte_size, target);
    }
  }

  // repeated .Quix.Process.ParameterDataRawProto.NumericValues numeric_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_numeric_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_numeric_values(i), target, stream);
  }

  // repeated .Quix.Process.ParameterDataRawProto.StringValues string_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_string_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_string_values(i), target, stream);
  }

  // repeated .Quix.Process.ParameterDataRawProto.BinaryValues binary_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_binary_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_binary_values(i), target, stream);
  }

  // repeated .Quix.Process.ParameterDataRawProto.StringValues tag_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tag_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tag_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Process.ParameterDataRawProto)
  return target;
}

size_t ParameterDataRawProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Process.ParameterDataRawProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 timestamps = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Quix.Process.ParameterDataRawProto.NumericValues numeric_values = 3;
  total_size += 1UL * this->_internal_numeric_values_size();
  for (const auto& msg : this->numeric_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Quix.Process.ParameterDataRawProto.StringValues string_values = 4;
  total_size += 1UL * this->_internal_string_values_size();
  for (const auto& msg : this->string_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Quix.Process.ParameterDataRawProto.BinaryValues binary_values = 5;
  total_size += 1UL * this->_internal_binary_values_size();
  for (const auto& msg : this->binary_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Quix.Process.ParameterDataRawProto.StringValues tag_values = 6;
  total_size += 1UL * this->_internal_tag_values_size();
  for (const auto& msg : this->tag_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterDataRawProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterDataRawProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterDataRawProto::GetClassData() const { return &_class_data_; }

void ParameterDataRawProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParameterDataRawProto *>(to)->MergeFrom(
      static_cast<const ParameterDataRawProto &>(from));
}


void ParameterDataRawProto::MergeFrom(const ParameterDataRawProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Process.ParameterDataRawProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  numeric_values_.MergeFrom(from.numeric_values_);
  string_values_.MergeFrom(from.string_values_);
  binary_values_.MergeFrom(from.binary_values_);
  tag_values_.MergeFrom(from.tag_values_);
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterDataRawProto::CopyFrom(const ParameterDataRawProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Process.ParameterDataRawProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDataRawProto::IsInitialized() const {
  return true;
}

void ParameterDataRawProto::InternalSwap(ParameterDataRawProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  timestamps_.InternalSwap(&other->timestamps_);
  numeric_values_.InternalSwap(&other->numeric_values_);
  string_values_.InternalSwap(&other->string_values_);
  binary_values_.InternalSwap(&other->binary_values_);
  tag_values_.InternalSwap(&other->tag_values_);
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterDataRawProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parameterDataRawProto_2eproto_getter, &descriptor_table_parameterDataRawProto_2eproto_once,
      file_level_metadata_parameterDataRawProto_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Quix::Process::ParameterDataRawProto_NumericValues* Arena::CreateMaybeMessage< ::Quix::Process::ParameterDataRawProto_NumericValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::ParameterDataRawProto_NumericValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Quix::Process::ParameterDataRawProto_StringValues* Arena::CreateMaybeMessage< ::Quix::Process::ParameterDataRawProto_StringValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::ParameterDataRawProto_StringValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Quix::Process::ParameterDataRawProto_BinaryValues* Arena::CreateMaybeMessage< ::Quix::Process::ParameterDataRawProto_BinaryValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::ParameterDataRawProto_BinaryValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Quix::Process::ParameterDataRawProto* Arena::CreateMaybeMessage< ::Quix::Process::ParameterDataRawProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Process::ParameterDataRawProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
