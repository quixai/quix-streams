// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameterDefinitionsProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parameterDefinitionsProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parameterDefinitionsProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parameterDefinitionsProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parameterDefinitionsProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parameterDefinitionsProto_2eproto;
namespace Quix {
namespace Process {
class ParameterDefinitionProto;
struct ParameterDefinitionProtoDefaultTypeInternal;
extern ParameterDefinitionProtoDefaultTypeInternal _ParameterDefinitionProto_default_instance_;
class ParameterDefinitionsProto;
struct ParameterDefinitionsProtoDefaultTypeInternal;
extern ParameterDefinitionsProtoDefaultTypeInternal _ParameterDefinitionsProto_default_instance_;
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> ::Quix::Process::ParameterDefinitionProto* Arena::CreateMaybeMessage<::Quix::Process::ParameterDefinitionProto>(Arena*);
template<> ::Quix::Process::ParameterDefinitionsProto* Arena::CreateMaybeMessage<::Quix::Process::ParameterDefinitionsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quix {
namespace Process {

// ===================================================================

class ParameterDefinitionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDefinitionProto) */ {
 public:
  inline ParameterDefinitionProto() : ParameterDefinitionProto(nullptr) {}
  ~ParameterDefinitionProto() override;
  explicit constexpr ParameterDefinitionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDefinitionProto(const ParameterDefinitionProto& from);
  ParameterDefinitionProto(ParameterDefinitionProto&& from) noexcept
    : ParameterDefinitionProto() {
    *this = ::std::move(from);
  }

  inline ParameterDefinitionProto& operator=(const ParameterDefinitionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDefinitionProto& operator=(ParameterDefinitionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDefinitionProto& default_instance() {
    return *internal_default_instance();
  }
  enum NameCase {
    kNameNull = 2,
    kNameValue = 3,
    NAME_NOT_SET = 0,
  };

  enum DescriptionCase {
    kDescriptionNull = 4,
    kDescriptionValue = 5,
    DESCRIPTION_NOT_SET = 0,
  };

  enum MinimumValueCase {
    kMinimumValueNull = 6,
    kMinimumValueValue = 7,
    MINIMUMVALUE_NOT_SET = 0,
  };

  enum MaximumValueCase {
    kMaximumValueNull = 8,
    kMaximumValueValue = 9,
    MAXIMUMVALUE_NOT_SET = 0,
  };

  enum UnitCase {
    kUnitNull = 10,
    kUnitValue = 11,
    UNIT_NOT_SET = 0,
  };

  enum FormatCase {
    kFormatNull = 12,
    kFormatValue = 13,
    FORMAT_NOT_SET = 0,
  };

  enum CustomPropertiesCase {
    kCustomPropertiesNull = 14,
    kCustomPropertiesValue = 15,
    CUSTOMPROPERTIES_NOT_SET = 0,
  };

  static inline const ParameterDefinitionProto* internal_default_instance() {
    return reinterpret_cast<const ParameterDefinitionProto*>(
               &_ParameterDefinitionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParameterDefinitionProto& a, ParameterDefinitionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDefinitionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDefinitionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDefinitionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDefinitionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDefinitionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDefinitionProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDefinitionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDefinitionProto";
  }
  protected:
  explicit ParameterDefinitionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocationFieldNumber = 16,
    kNameNullFieldNumber = 2,
    kNameValueFieldNumber = 3,
    kDescriptionNullFieldNumber = 4,
    kDescriptionValueFieldNumber = 5,
    kMinimumValueNullFieldNumber = 6,
    kMinimumValueValueFieldNumber = 7,
    kMaximumValueNullFieldNumber = 8,
    kMaximumValueValueFieldNumber = 9,
    kUnitNullFieldNumber = 10,
    kUnitValueFieldNumber = 11,
    kFormatNullFieldNumber = 12,
    kFormatValueFieldNumber = 13,
    kCustomPropertiesNullFieldNumber = 14,
    kCustomPropertiesValueFieldNumber = 15,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string location = 16;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // bool name_null = 2;
  bool has_name_null() const;
  private:
  bool _internal_has_name_null() const;
  public:
  void clear_name_null();
  bool name_null() const;
  void set_name_null(bool value);
  private:
  bool _internal_name_null() const;
  void _internal_set_name_null(bool value);
  public:

  // string name_value = 3;
  bool has_name_value() const;
  private:
  bool _internal_has_name_value() const;
  public:
  void clear_name_value();
  const std::string& name_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_value();
  PROTOBUF_NODISCARD std::string* release_name_value();
  void set_allocated_name_value(std::string* name_value);
  private:
  const std::string& _internal_name_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_value(const std::string& value);
  std::string* _internal_mutable_name_value();
  public:

  // bool description_null = 4;
  bool has_description_null() const;
  private:
  bool _internal_has_description_null() const;
  public:
  void clear_description_null();
  bool description_null() const;
  void set_description_null(bool value);
  private:
  bool _internal_description_null() const;
  void _internal_set_description_null(bool value);
  public:

  // string description_value = 5;
  bool has_description_value() const;
  private:
  bool _internal_has_description_value() const;
  public:
  void clear_description_value();
  const std::string& description_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description_value();
  PROTOBUF_NODISCARD std::string* release_description_value();
  void set_allocated_description_value(std::string* description_value);
  private:
  const std::string& _internal_description_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description_value(const std::string& value);
  std::string* _internal_mutable_description_value();
  public:

  // bool minimumValue_null = 6;
  bool has_minimumvalue_null() const;
  private:
  bool _internal_has_minimumvalue_null() const;
  public:
  void clear_minimumvalue_null();
  bool minimumvalue_null() const;
  void set_minimumvalue_null(bool value);
  private:
  bool _internal_minimumvalue_null() const;
  void _internal_set_minimumvalue_null(bool value);
  public:

  // double minimumValue_value = 7;
  bool has_minimumvalue_value() const;
  private:
  bool _internal_has_minimumvalue_value() const;
  public:
  void clear_minimumvalue_value();
  double minimumvalue_value() const;
  void set_minimumvalue_value(double value);
  private:
  double _internal_minimumvalue_value() const;
  void _internal_set_minimumvalue_value(double value);
  public:

  // bool maximumValue_null = 8;
  bool has_maximumvalue_null() const;
  private:
  bool _internal_has_maximumvalue_null() const;
  public:
  void clear_maximumvalue_null();
  bool maximumvalue_null() const;
  void set_maximumvalue_null(bool value);
  private:
  bool _internal_maximumvalue_null() const;
  void _internal_set_maximumvalue_null(bool value);
  public:

  // double maximumValue_value = 9;
  bool has_maximumvalue_value() const;
  private:
  bool _internal_has_maximumvalue_value() const;
  public:
  void clear_maximumvalue_value();
  double maximumvalue_value() const;
  void set_maximumvalue_value(double value);
  private:
  double _internal_maximumvalue_value() const;
  void _internal_set_maximumvalue_value(double value);
  public:

  // bool unit_null = 10;
  bool has_unit_null() const;
  private:
  bool _internal_has_unit_null() const;
  public:
  void clear_unit_null();
  bool unit_null() const;
  void set_unit_null(bool value);
  private:
  bool _internal_unit_null() const;
  void _internal_set_unit_null(bool value);
  public:

  // string unit_value = 11;
  bool has_unit_value() const;
  private:
  bool _internal_has_unit_value() const;
  public:
  void clear_unit_value();
  const std::string& unit_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit_value();
  PROTOBUF_NODISCARD std::string* release_unit_value();
  void set_allocated_unit_value(std::string* unit_value);
  private:
  const std::string& _internal_unit_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit_value(const std::string& value);
  std::string* _internal_mutable_unit_value();
  public:

  // bool format_null = 12;
  bool has_format_null() const;
  private:
  bool _internal_has_format_null() const;
  public:
  void clear_format_null();
  bool format_null() const;
  void set_format_null(bool value);
  private:
  bool _internal_format_null() const;
  void _internal_set_format_null(bool value);
  public:

  // string format_value = 13;
  bool has_format_value() const;
  private:
  bool _internal_has_format_value() const;
  public:
  void clear_format_value();
  const std::string& format_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format_value();
  PROTOBUF_NODISCARD std::string* release_format_value();
  void set_allocated_format_value(std::string* format_value);
  private:
  const std::string& _internal_format_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format_value(const std::string& value);
  std::string* _internal_mutable_format_value();
  public:

  // bool customProperties_null = 14;
  bool has_customproperties_null() const;
  private:
  bool _internal_has_customproperties_null() const;
  public:
  void clear_customproperties_null();
  bool customproperties_null() const;
  void set_customproperties_null(bool value);
  private:
  bool _internal_customproperties_null() const;
  void _internal_set_customproperties_null(bool value);
  public:

  // string customProperties_value = 15;
  bool has_customproperties_value() const;
  private:
  bool _internal_has_customproperties_value() const;
  public:
  void clear_customproperties_value();
  const std::string& customproperties_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customproperties_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customproperties_value();
  PROTOBUF_NODISCARD std::string* release_customproperties_value();
  void set_allocated_customproperties_value(std::string* customproperties_value);
  private:
  const std::string& _internal_customproperties_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customproperties_value(const std::string& value);
  std::string* _internal_mutable_customproperties_value();
  public:

  void clear_name();
  NameCase name_case() const;
  void clear_description();
  DescriptionCase description_case() const;
  void clear_minimumValue();
  MinimumValueCase minimumValue_case() const;
  void clear_maximumValue();
  MaximumValueCase maximumValue_case() const;
  void clear_unit();
  UnitCase unit_case() const;
  void clear_format();
  FormatCase format_case() const;
  void clear_customProperties();
  CustomPropertiesCase customProperties_case() const;
  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDefinitionProto)
 private:
  class _Internal;
  void set_has_name_null();
  void set_has_name_value();
  void set_has_description_null();
  void set_has_description_value();
  void set_has_minimumvalue_null();
  void set_has_minimumvalue_value();
  void set_has_maximumvalue_null();
  void set_has_maximumvalue_value();
  void set_has_unit_null();
  void set_has_unit_value();
  void set_has_format_null();
  void set_has_format_value();
  void set_has_customproperties_null();
  void set_has_customproperties_value();

  inline bool has_name() const;
  inline void clear_has_name();

  inline bool has_description() const;
  inline void clear_has_description();

  inline bool has_minimumValue() const;
  inline void clear_has_minimumValue();

  inline bool has_maximumValue() const;
  inline void clear_has_maximumValue();

  inline bool has_unit() const;
  inline void clear_has_unit();

  inline bool has_format() const;
  inline void clear_has_format();

  inline bool has_customProperties() const;
  inline void clear_has_customProperties();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  union NameUnion {
    constexpr NameUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool name_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_value_;
  } name_;
  union DescriptionUnion {
    constexpr DescriptionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool description_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_value_;
  } description_;
  union MinimumValueUnion {
    constexpr MinimumValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool minimumvalue_null_;
    double minimumvalue_value_;
  } minimumValue_;
  union MaximumValueUnion {
    constexpr MaximumValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool maximumvalue_null_;
    double maximumvalue_value_;
  } maximumValue_;
  union UnitUnion {
    constexpr UnitUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool unit_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_value_;
  } unit_;
  union FormatUnion {
    constexpr FormatUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool format_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_value_;
  } format_;
  union CustomPropertiesUnion {
    constexpr CustomPropertiesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool customproperties_null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customproperties_value_;
  } customProperties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[7];

  friend struct ::TableStruct_parameterDefinitionsProto_2eproto;
};
// -------------------------------------------------------------------

class ParameterDefinitionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.ParameterDefinitionsProto) */ {
 public:
  inline ParameterDefinitionsProto() : ParameterDefinitionsProto(nullptr) {}
  ~ParameterDefinitionsProto() override;
  explicit constexpr ParameterDefinitionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterDefinitionsProto(const ParameterDefinitionsProto& from);
  ParameterDefinitionsProto(ParameterDefinitionsProto&& from) noexcept
    : ParameterDefinitionsProto() {
    *this = ::std::move(from);
  }

  inline ParameterDefinitionsProto& operator=(const ParameterDefinitionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterDefinitionsProto& operator=(ParameterDefinitionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterDefinitionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterDefinitionsProto* internal_default_instance() {
    return reinterpret_cast<const ParameterDefinitionsProto*>(
               &_ParameterDefinitionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParameterDefinitionsProto& a, ParameterDefinitionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterDefinitionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterDefinitionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterDefinitionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterDefinitionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterDefinitionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterDefinitionsProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterDefinitionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.ParameterDefinitionsProto";
  }
  protected:
  explicit ParameterDefinitionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // repeated .Quix.Process.ParameterDefinitionProto parameters = 1;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::Quix::Process::ParameterDefinitionProto* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDefinitionProto >*
      mutable_parameters();
  private:
  const ::Quix::Process::ParameterDefinitionProto& _internal_parameters(int index) const;
  ::Quix::Process::ParameterDefinitionProto* _internal_add_parameters();
  public:
  const ::Quix::Process::ParameterDefinitionProto& parameters(int index) const;
  ::Quix::Process::ParameterDefinitionProto* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDefinitionProto >&
      parameters() const;

  // @@protoc_insertion_point(class_scope:Quix.Process.ParameterDefinitionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDefinitionProto > parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameterDefinitionsProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParameterDefinitionProto

// string id = 1;
inline void ParameterDefinitionProto::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ParameterDefinitionProto::id() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterDefinitionProto::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.id)
}
inline std::string* ParameterDefinitionProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.id)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_id() const {
  return id_.Get();
}
inline void ParameterDefinitionProto::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_id() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParameterDefinitionProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.id)
}

// bool name_null = 2;
inline bool ParameterDefinitionProto::_internal_has_name_null() const {
  return name_case() == kNameNull;
}
inline bool ParameterDefinitionProto::has_name_null() const {
  return _internal_has_name_null();
}
inline void ParameterDefinitionProto::set_has_name_null() {
  _oneof_case_[0] = kNameNull;
}
inline void ParameterDefinitionProto::clear_name_null() {
  if (_internal_has_name_null()) {
    name_.name_null_ = false;
    clear_has_name();
  }
}
inline bool ParameterDefinitionProto::_internal_name_null() const {
  if (_internal_has_name_null()) {
    return name_.name_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_name_null(bool value) {
  if (!_internal_has_name_null()) {
    clear_name();
    set_has_name_null();
  }
  name_.name_null_ = value;
}
inline bool ParameterDefinitionProto::name_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.name_null)
  return _internal_name_null();
}
inline void ParameterDefinitionProto::set_name_null(bool value) {
  _internal_set_name_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.name_null)
}

// string name_value = 3;
inline bool ParameterDefinitionProto::_internal_has_name_value() const {
  return name_case() == kNameValue;
}
inline bool ParameterDefinitionProto::has_name_value() const {
  return _internal_has_name_value();
}
inline void ParameterDefinitionProto::set_has_name_value() {
  _oneof_case_[0] = kNameValue;
}
inline void ParameterDefinitionProto::clear_name_value() {
  if (_internal_has_name_value()) {
    name_.name_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_name();
  }
}
inline const std::string& ParameterDefinitionProto::name_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.name_value)
  return _internal_name_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParameterDefinitionProto::set_name_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_.name_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.name_value)
}
inline std::string* ParameterDefinitionProto::mutable_name_value() {
  std::string* _s = _internal_mutable_name_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.name_value)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_name_value() const {
  if (_internal_has_name_value()) {
    return name_.name_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParameterDefinitionProto::_internal_set_name_value(const std::string& value) {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_.name_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_name_value() {
  if (!_internal_has_name_value()) {
    clear_name();
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return name_.name_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_name_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.name_value)
  if (_internal_has_name_value()) {
    clear_has_name();
    return name_.name_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ParameterDefinitionProto::set_allocated_name_value(std::string* name_value) {
  if (has_name()) {
    clear_name();
  }
  if (name_value != nullptr) {
    set_has_name_value();
    name_.name_value_.UnsafeSetDefault(name_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(name_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.name_value)
}

// bool description_null = 4;
inline bool ParameterDefinitionProto::_internal_has_description_null() const {
  return description_case() == kDescriptionNull;
}
inline bool ParameterDefinitionProto::has_description_null() const {
  return _internal_has_description_null();
}
inline void ParameterDefinitionProto::set_has_description_null() {
  _oneof_case_[1] = kDescriptionNull;
}
inline void ParameterDefinitionProto::clear_description_null() {
  if (_internal_has_description_null()) {
    description_.description_null_ = false;
    clear_has_description();
  }
}
inline bool ParameterDefinitionProto::_internal_description_null() const {
  if (_internal_has_description_null()) {
    return description_.description_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_description_null(bool value) {
  if (!_internal_has_description_null()) {
    clear_description();
    set_has_description_null();
  }
  description_.description_null_ = value;
}
inline bool ParameterDefinitionProto::description_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.description_null)
  return _internal_description_null();
}
inline void ParameterDefinitionProto::set_description_null(bool value) {
  _internal_set_description_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.description_null)
}

// string description_value = 5;
inline bool ParameterDefinitionProto::_internal_has_description_value() const {
  return description_case() == kDescriptionValue;
}
inline bool ParameterDefinitionProto::has_description_value() const {
  return _internal_has_description_value();
}
inline void ParameterDefinitionProto::set_has_description_value() {
  _oneof_case_[1] = kDescriptionValue;
}
inline void ParameterDefinitionProto::clear_description_value() {
  if (_internal_has_description_value()) {
    description_.description_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_description();
  }
}
inline const std::string& ParameterDefinitionProto::description_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.description_value)
  return _internal_description_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParameterDefinitionProto::set_description_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  description_.description_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.description_value)
}
inline std::string* ParameterDefinitionProto::mutable_description_value() {
  std::string* _s = _internal_mutable_description_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.description_value)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_description_value() const {
  if (_internal_has_description_value()) {
    return description_.description_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParameterDefinitionProto::_internal_set_description_value(const std::string& value) {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  description_.description_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_description_value() {
  if (!_internal_has_description_value()) {
    clear_description();
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return description_.description_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_description_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.description_value)
  if (_internal_has_description_value()) {
    clear_has_description();
    return description_.description_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ParameterDefinitionProto::set_allocated_description_value(std::string* description_value) {
  if (has_description()) {
    clear_description();
  }
  if (description_value != nullptr) {
    set_has_description_value();
    description_.description_value_.UnsafeSetDefault(description_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(description_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.description_value)
}

// bool minimumValue_null = 6;
inline bool ParameterDefinitionProto::_internal_has_minimumvalue_null() const {
  return minimumValue_case() == kMinimumValueNull;
}
inline bool ParameterDefinitionProto::has_minimumvalue_null() const {
  return _internal_has_minimumvalue_null();
}
inline void ParameterDefinitionProto::set_has_minimumvalue_null() {
  _oneof_case_[2] = kMinimumValueNull;
}
inline void ParameterDefinitionProto::clear_minimumvalue_null() {
  if (_internal_has_minimumvalue_null()) {
    minimumValue_.minimumvalue_null_ = false;
    clear_has_minimumValue();
  }
}
inline bool ParameterDefinitionProto::_internal_minimumvalue_null() const {
  if (_internal_has_minimumvalue_null()) {
    return minimumValue_.minimumvalue_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_minimumvalue_null(bool value) {
  if (!_internal_has_minimumvalue_null()) {
    clear_minimumValue();
    set_has_minimumvalue_null();
  }
  minimumValue_.minimumvalue_null_ = value;
}
inline bool ParameterDefinitionProto::minimumvalue_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.minimumValue_null)
  return _internal_minimumvalue_null();
}
inline void ParameterDefinitionProto::set_minimumvalue_null(bool value) {
  _internal_set_minimumvalue_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.minimumValue_null)
}

// double minimumValue_value = 7;
inline bool ParameterDefinitionProto::_internal_has_minimumvalue_value() const {
  return minimumValue_case() == kMinimumValueValue;
}
inline bool ParameterDefinitionProto::has_minimumvalue_value() const {
  return _internal_has_minimumvalue_value();
}
inline void ParameterDefinitionProto::set_has_minimumvalue_value() {
  _oneof_case_[2] = kMinimumValueValue;
}
inline void ParameterDefinitionProto::clear_minimumvalue_value() {
  if (_internal_has_minimumvalue_value()) {
    minimumValue_.minimumvalue_value_ = 0;
    clear_has_minimumValue();
  }
}
inline double ParameterDefinitionProto::_internal_minimumvalue_value() const {
  if (_internal_has_minimumvalue_value()) {
    return minimumValue_.minimumvalue_value_;
  }
  return 0;
}
inline void ParameterDefinitionProto::_internal_set_minimumvalue_value(double value) {
  if (!_internal_has_minimumvalue_value()) {
    clear_minimumValue();
    set_has_minimumvalue_value();
  }
  minimumValue_.minimumvalue_value_ = value;
}
inline double ParameterDefinitionProto::minimumvalue_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.minimumValue_value)
  return _internal_minimumvalue_value();
}
inline void ParameterDefinitionProto::set_minimumvalue_value(double value) {
  _internal_set_minimumvalue_value(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.minimumValue_value)
}

// bool maximumValue_null = 8;
inline bool ParameterDefinitionProto::_internal_has_maximumvalue_null() const {
  return maximumValue_case() == kMaximumValueNull;
}
inline bool ParameterDefinitionProto::has_maximumvalue_null() const {
  return _internal_has_maximumvalue_null();
}
inline void ParameterDefinitionProto::set_has_maximumvalue_null() {
  _oneof_case_[3] = kMaximumValueNull;
}
inline void ParameterDefinitionProto::clear_maximumvalue_null() {
  if (_internal_has_maximumvalue_null()) {
    maximumValue_.maximumvalue_null_ = false;
    clear_has_maximumValue();
  }
}
inline bool ParameterDefinitionProto::_internal_maximumvalue_null() const {
  if (_internal_has_maximumvalue_null()) {
    return maximumValue_.maximumvalue_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_maximumvalue_null(bool value) {
  if (!_internal_has_maximumvalue_null()) {
    clear_maximumValue();
    set_has_maximumvalue_null();
  }
  maximumValue_.maximumvalue_null_ = value;
}
inline bool ParameterDefinitionProto::maximumvalue_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.maximumValue_null)
  return _internal_maximumvalue_null();
}
inline void ParameterDefinitionProto::set_maximumvalue_null(bool value) {
  _internal_set_maximumvalue_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.maximumValue_null)
}

// double maximumValue_value = 9;
inline bool ParameterDefinitionProto::_internal_has_maximumvalue_value() const {
  return maximumValue_case() == kMaximumValueValue;
}
inline bool ParameterDefinitionProto::has_maximumvalue_value() const {
  return _internal_has_maximumvalue_value();
}
inline void ParameterDefinitionProto::set_has_maximumvalue_value() {
  _oneof_case_[3] = kMaximumValueValue;
}
inline void ParameterDefinitionProto::clear_maximumvalue_value() {
  if (_internal_has_maximumvalue_value()) {
    maximumValue_.maximumvalue_value_ = 0;
    clear_has_maximumValue();
  }
}
inline double ParameterDefinitionProto::_internal_maximumvalue_value() const {
  if (_internal_has_maximumvalue_value()) {
    return maximumValue_.maximumvalue_value_;
  }
  return 0;
}
inline void ParameterDefinitionProto::_internal_set_maximumvalue_value(double value) {
  if (!_internal_has_maximumvalue_value()) {
    clear_maximumValue();
    set_has_maximumvalue_value();
  }
  maximumValue_.maximumvalue_value_ = value;
}
inline double ParameterDefinitionProto::maximumvalue_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.maximumValue_value)
  return _internal_maximumvalue_value();
}
inline void ParameterDefinitionProto::set_maximumvalue_value(double value) {
  _internal_set_maximumvalue_value(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.maximumValue_value)
}

// bool unit_null = 10;
inline bool ParameterDefinitionProto::_internal_has_unit_null() const {
  return unit_case() == kUnitNull;
}
inline bool ParameterDefinitionProto::has_unit_null() const {
  return _internal_has_unit_null();
}
inline void ParameterDefinitionProto::set_has_unit_null() {
  _oneof_case_[4] = kUnitNull;
}
inline void ParameterDefinitionProto::clear_unit_null() {
  if (_internal_has_unit_null()) {
    unit_.unit_null_ = false;
    clear_has_unit();
  }
}
inline bool ParameterDefinitionProto::_internal_unit_null() const {
  if (_internal_has_unit_null()) {
    return unit_.unit_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_unit_null(bool value) {
  if (!_internal_has_unit_null()) {
    clear_unit();
    set_has_unit_null();
  }
  unit_.unit_null_ = value;
}
inline bool ParameterDefinitionProto::unit_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.unit_null)
  return _internal_unit_null();
}
inline void ParameterDefinitionProto::set_unit_null(bool value) {
  _internal_set_unit_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.unit_null)
}

// string unit_value = 11;
inline bool ParameterDefinitionProto::_internal_has_unit_value() const {
  return unit_case() == kUnitValue;
}
inline bool ParameterDefinitionProto::has_unit_value() const {
  return _internal_has_unit_value();
}
inline void ParameterDefinitionProto::set_has_unit_value() {
  _oneof_case_[4] = kUnitValue;
}
inline void ParameterDefinitionProto::clear_unit_value() {
  if (_internal_has_unit_value()) {
    unit_.unit_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_unit();
  }
}
inline const std::string& ParameterDefinitionProto::unit_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.unit_value)
  return _internal_unit_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParameterDefinitionProto::set_unit_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_unit_value()) {
    clear_unit();
    set_has_unit_value();
    unit_.unit_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  unit_.unit_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.unit_value)
}
inline std::string* ParameterDefinitionProto::mutable_unit_value() {
  std::string* _s = _internal_mutable_unit_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.unit_value)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_unit_value() const {
  if (_internal_has_unit_value()) {
    return unit_.unit_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParameterDefinitionProto::_internal_set_unit_value(const std::string& value) {
  if (!_internal_has_unit_value()) {
    clear_unit();
    set_has_unit_value();
    unit_.unit_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  unit_.unit_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_unit_value() {
  if (!_internal_has_unit_value()) {
    clear_unit();
    set_has_unit_value();
    unit_.unit_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return unit_.unit_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_unit_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.unit_value)
  if (_internal_has_unit_value()) {
    clear_has_unit();
    return unit_.unit_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ParameterDefinitionProto::set_allocated_unit_value(std::string* unit_value) {
  if (has_unit()) {
    clear_unit();
  }
  if (unit_value != nullptr) {
    set_has_unit_value();
    unit_.unit_value_.UnsafeSetDefault(unit_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(unit_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.unit_value)
}

// bool format_null = 12;
inline bool ParameterDefinitionProto::_internal_has_format_null() const {
  return format_case() == kFormatNull;
}
inline bool ParameterDefinitionProto::has_format_null() const {
  return _internal_has_format_null();
}
inline void ParameterDefinitionProto::set_has_format_null() {
  _oneof_case_[5] = kFormatNull;
}
inline void ParameterDefinitionProto::clear_format_null() {
  if (_internal_has_format_null()) {
    format_.format_null_ = false;
    clear_has_format();
  }
}
inline bool ParameterDefinitionProto::_internal_format_null() const {
  if (_internal_has_format_null()) {
    return format_.format_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_format_null(bool value) {
  if (!_internal_has_format_null()) {
    clear_format();
    set_has_format_null();
  }
  format_.format_null_ = value;
}
inline bool ParameterDefinitionProto::format_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.format_null)
  return _internal_format_null();
}
inline void ParameterDefinitionProto::set_format_null(bool value) {
  _internal_set_format_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.format_null)
}

// string format_value = 13;
inline bool ParameterDefinitionProto::_internal_has_format_value() const {
  return format_case() == kFormatValue;
}
inline bool ParameterDefinitionProto::has_format_value() const {
  return _internal_has_format_value();
}
inline void ParameterDefinitionProto::set_has_format_value() {
  _oneof_case_[5] = kFormatValue;
}
inline void ParameterDefinitionProto::clear_format_value() {
  if (_internal_has_format_value()) {
    format_.format_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_format();
  }
}
inline const std::string& ParameterDefinitionProto::format_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.format_value)
  return _internal_format_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParameterDefinitionProto::set_format_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_format_value()) {
    clear_format();
    set_has_format_value();
    format_.format_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  format_.format_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.format_value)
}
inline std::string* ParameterDefinitionProto::mutable_format_value() {
  std::string* _s = _internal_mutable_format_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.format_value)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_format_value() const {
  if (_internal_has_format_value()) {
    return format_.format_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParameterDefinitionProto::_internal_set_format_value(const std::string& value) {
  if (!_internal_has_format_value()) {
    clear_format();
    set_has_format_value();
    format_.format_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  format_.format_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_format_value() {
  if (!_internal_has_format_value()) {
    clear_format();
    set_has_format_value();
    format_.format_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return format_.format_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_format_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.format_value)
  if (_internal_has_format_value()) {
    clear_has_format();
    return format_.format_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ParameterDefinitionProto::set_allocated_format_value(std::string* format_value) {
  if (has_format()) {
    clear_format();
  }
  if (format_value != nullptr) {
    set_has_format_value();
    format_.format_value_.UnsafeSetDefault(format_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(format_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.format_value)
}

// bool customProperties_null = 14;
inline bool ParameterDefinitionProto::_internal_has_customproperties_null() const {
  return customProperties_case() == kCustomPropertiesNull;
}
inline bool ParameterDefinitionProto::has_customproperties_null() const {
  return _internal_has_customproperties_null();
}
inline void ParameterDefinitionProto::set_has_customproperties_null() {
  _oneof_case_[6] = kCustomPropertiesNull;
}
inline void ParameterDefinitionProto::clear_customproperties_null() {
  if (_internal_has_customproperties_null()) {
    customProperties_.customproperties_null_ = false;
    clear_has_customProperties();
  }
}
inline bool ParameterDefinitionProto::_internal_customproperties_null() const {
  if (_internal_has_customproperties_null()) {
    return customProperties_.customproperties_null_;
  }
  return false;
}
inline void ParameterDefinitionProto::_internal_set_customproperties_null(bool value) {
  if (!_internal_has_customproperties_null()) {
    clear_customProperties();
    set_has_customproperties_null();
  }
  customProperties_.customproperties_null_ = value;
}
inline bool ParameterDefinitionProto::customproperties_null() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.customProperties_null)
  return _internal_customproperties_null();
}
inline void ParameterDefinitionProto::set_customproperties_null(bool value) {
  _internal_set_customproperties_null(value);
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.customProperties_null)
}

// string customProperties_value = 15;
inline bool ParameterDefinitionProto::_internal_has_customproperties_value() const {
  return customProperties_case() == kCustomPropertiesValue;
}
inline bool ParameterDefinitionProto::has_customproperties_value() const {
  return _internal_has_customproperties_value();
}
inline void ParameterDefinitionProto::set_has_customproperties_value() {
  _oneof_case_[6] = kCustomPropertiesValue;
}
inline void ParameterDefinitionProto::clear_customproperties_value() {
  if (_internal_has_customproperties_value()) {
    customProperties_.customproperties_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_customProperties();
  }
}
inline const std::string& ParameterDefinitionProto::customproperties_value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.customProperties_value)
  return _internal_customproperties_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParameterDefinitionProto::set_customproperties_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customProperties_.customproperties_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.customProperties_value)
}
inline std::string* ParameterDefinitionProto::mutable_customproperties_value() {
  std::string* _s = _internal_mutable_customproperties_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.customProperties_value)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_customproperties_value() const {
  if (_internal_has_customproperties_value()) {
    return customProperties_.customproperties_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParameterDefinitionProto::_internal_set_customproperties_value(const std::string& value) {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customProperties_.customproperties_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_customproperties_value() {
  if (!_internal_has_customproperties_value()) {
    clear_customProperties();
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customProperties_.customproperties_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_customproperties_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.customProperties_value)
  if (_internal_has_customproperties_value()) {
    clear_has_customProperties();
    return customProperties_.customproperties_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ParameterDefinitionProto::set_allocated_customproperties_value(std::string* customproperties_value) {
  if (has_customProperties()) {
    clear_customProperties();
  }
  if (customproperties_value != nullptr) {
    set_has_customproperties_value();
    customProperties_.customproperties_value_.UnsafeSetDefault(customproperties_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(customproperties_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.customProperties_value)
}

// string location = 16;
inline void ParameterDefinitionProto::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& ParameterDefinitionProto::location() const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionProto.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterDefinitionProto::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.ParameterDefinitionProto.location)
}
inline std::string* ParameterDefinitionProto::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionProto.location)
  return _s;
}
inline const std::string& ParameterDefinitionProto::_internal_location() const {
  return location_.Get();
}
inline void ParameterDefinitionProto::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParameterDefinitionProto::release_location() {
  // @@protoc_insertion_point(field_release:Quix.Process.ParameterDefinitionProto.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParameterDefinitionProto::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.ParameterDefinitionProto.location)
}

inline bool ParameterDefinitionProto::has_name() const {
  return name_case() != NAME_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_name() {
  _oneof_case_[0] = NAME_NOT_SET;
}
inline bool ParameterDefinitionProto::has_description() const {
  return description_case() != DESCRIPTION_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_description() {
  _oneof_case_[1] = DESCRIPTION_NOT_SET;
}
inline bool ParameterDefinitionProto::has_minimumValue() const {
  return minimumValue_case() != MINIMUMVALUE_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_minimumValue() {
  _oneof_case_[2] = MINIMUMVALUE_NOT_SET;
}
inline bool ParameterDefinitionProto::has_maximumValue() const {
  return maximumValue_case() != MAXIMUMVALUE_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_maximumValue() {
  _oneof_case_[3] = MAXIMUMVALUE_NOT_SET;
}
inline bool ParameterDefinitionProto::has_unit() const {
  return unit_case() != UNIT_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_unit() {
  _oneof_case_[4] = UNIT_NOT_SET;
}
inline bool ParameterDefinitionProto::has_format() const {
  return format_case() != FORMAT_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_format() {
  _oneof_case_[5] = FORMAT_NOT_SET;
}
inline bool ParameterDefinitionProto::has_customProperties() const {
  return customProperties_case() != CUSTOMPROPERTIES_NOT_SET;
}
inline void ParameterDefinitionProto::clear_has_customProperties() {
  _oneof_case_[6] = CUSTOMPROPERTIES_NOT_SET;
}
inline ParameterDefinitionProto::NameCase ParameterDefinitionProto::name_case() const {
  return ParameterDefinitionProto::NameCase(_oneof_case_[0]);
}
inline ParameterDefinitionProto::DescriptionCase ParameterDefinitionProto::description_case() const {
  return ParameterDefinitionProto::DescriptionCase(_oneof_case_[1]);
}
inline ParameterDefinitionProto::MinimumValueCase ParameterDefinitionProto::minimumValue_case() const {
  return ParameterDefinitionProto::MinimumValueCase(_oneof_case_[2]);
}
inline ParameterDefinitionProto::MaximumValueCase ParameterDefinitionProto::maximumValue_case() const {
  return ParameterDefinitionProto::MaximumValueCase(_oneof_case_[3]);
}
inline ParameterDefinitionProto::UnitCase ParameterDefinitionProto::unit_case() const {
  return ParameterDefinitionProto::UnitCase(_oneof_case_[4]);
}
inline ParameterDefinitionProto::FormatCase ParameterDefinitionProto::format_case() const {
  return ParameterDefinitionProto::FormatCase(_oneof_case_[5]);
}
inline ParameterDefinitionProto::CustomPropertiesCase ParameterDefinitionProto::customProperties_case() const {
  return ParameterDefinitionProto::CustomPropertiesCase(_oneof_case_[6]);
}
// -------------------------------------------------------------------

// ParameterDefinitionsProto

// repeated .Quix.Process.ParameterDefinitionProto parameters = 1;
inline int ParameterDefinitionsProto::_internal_parameters_size() const {
  return parameters_.size();
}
inline int ParameterDefinitionsProto::parameters_size() const {
  return _internal_parameters_size();
}
inline void ParameterDefinitionsProto::clear_parameters() {
  parameters_.Clear();
}
inline ::Quix::Process::ParameterDefinitionProto* ParameterDefinitionsProto::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.ParameterDefinitionsProto.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDefinitionProto >*
ParameterDefinitionsProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.ParameterDefinitionsProto.parameters)
  return &parameters_;
}
inline const ::Quix::Process::ParameterDefinitionProto& ParameterDefinitionsProto::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::Quix::Process::ParameterDefinitionProto& ParameterDefinitionsProto::parameters(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.ParameterDefinitionsProto.parameters)
  return _internal_parameters(index);
}
inline ::Quix::Process::ParameterDefinitionProto* ParameterDefinitionsProto::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::Quix::Process::ParameterDefinitionProto* ParameterDefinitionsProto::add_parameters() {
  ::Quix::Process::ParameterDefinitionProto* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:Quix.Process.ParameterDefinitionsProto.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::ParameterDefinitionProto >&
ParameterDefinitionsProto::parameters() const {
  // @@protoc_insertion_point(field_list:Quix.Process.ParameterDefinitionsProto.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Process
}  // namespace Quix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parameterDefinitionsProto_2eproto
