// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eventDataRawsProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eventDataRawsProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eventDataRawsProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eventDataRawsProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eventDataRawsProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eventDataRawsProto_2eproto;
namespace Quix {
namespace Process {
class EventDataRawProto;
struct EventDataRawProtoDefaultTypeInternal;
extern EventDataRawProtoDefaultTypeInternal _EventDataRawProto_default_instance_;
class EventDataRawProto_TagsEntry_DoNotUse;
struct EventDataRawProto_TagsEntry_DoNotUseDefaultTypeInternal;
extern EventDataRawProto_TagsEntry_DoNotUseDefaultTypeInternal _EventDataRawProto_TagsEntry_DoNotUse_default_instance_;
class EventDataRawsProto;
struct EventDataRawsProtoDefaultTypeInternal;
extern EventDataRawsProtoDefaultTypeInternal _EventDataRawsProto_default_instance_;
}  // namespace Process
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> ::Quix::Process::EventDataRawProto* Arena::CreateMaybeMessage<::Quix::Process::EventDataRawProto>(Arena*);
template<> ::Quix::Process::EventDataRawProto_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::Quix::Process::EventDataRawProto_TagsEntry_DoNotUse>(Arena*);
template<> ::Quix::Process::EventDataRawsProto* Arena::CreateMaybeMessage<::Quix::Process::EventDataRawsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quix {
namespace Process {

// ===================================================================

class EventDataRawProto_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EventDataRawProto_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EventDataRawProto_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  EventDataRawProto_TagsEntry_DoNotUse();
  explicit constexpr EventDataRawProto_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EventDataRawProto_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EventDataRawProto_TagsEntry_DoNotUse& other);
  static const EventDataRawProto_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EventDataRawProto_TagsEntry_DoNotUse*>(&_EventDataRawProto_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Quix.Process.EventDataRawProto.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Quix.Process.EventDataRawProto.TagsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class EventDataRawProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.EventDataRawProto) */ {
 public:
  inline EventDataRawProto() : EventDataRawProto(nullptr) {}
  ~EventDataRawProto() override;
  explicit constexpr EventDataRawProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventDataRawProto(const EventDataRawProto& from);
  EventDataRawProto(EventDataRawProto&& from) noexcept
    : EventDataRawProto() {
    *this = ::std::move(from);
  }

  inline EventDataRawProto& operator=(const EventDataRawProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDataRawProto& operator=(EventDataRawProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDataRawProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventDataRawProto* internal_default_instance() {
    return reinterpret_cast<const EventDataRawProto*>(
               &_EventDataRawProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventDataRawProto& a, EventDataRawProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDataRawProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDataRawProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventDataRawProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventDataRawProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventDataRawProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventDataRawProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDataRawProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.EventDataRawProto";
  }
  protected:
  explicit EventDataRawProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kIdFieldNumber = 3,
    kValueFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // map<string, string> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Quix.Process.EventDataRawProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EventDataRawProto_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eventDataRawsProto_2eproto;
};
// -------------------------------------------------------------------

class EventDataRawsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quix.Process.EventDataRawsProto) */ {
 public:
  inline EventDataRawsProto() : EventDataRawsProto(nullptr) {}
  ~EventDataRawsProto() override;
  explicit constexpr EventDataRawsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventDataRawsProto(const EventDataRawsProto& from);
  EventDataRawsProto(EventDataRawsProto&& from) noexcept
    : EventDataRawsProto() {
    *this = ::std::move(from);
  }

  inline EventDataRawsProto& operator=(const EventDataRawsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDataRawsProto& operator=(EventDataRawsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDataRawsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventDataRawsProto* internal_default_instance() {
    return reinterpret_cast<const EventDataRawsProto*>(
               &_EventDataRawsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventDataRawsProto& a, EventDataRawsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDataRawsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDataRawsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventDataRawsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventDataRawsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventDataRawsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventDataRawsProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDataRawsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quix.Process.EventDataRawsProto";
  }
  protected:
  explicit EventDataRawsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .Quix.Process.EventDataRawProto events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::Quix::Process::EventDataRawProto* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDataRawProto >*
      mutable_events();
  private:
  const ::Quix::Process::EventDataRawProto& _internal_events(int index) const;
  ::Quix::Process::EventDataRawProto* _internal_add_events();
  public:
  const ::Quix::Process::EventDataRawProto& events(int index) const;
  ::Quix::Process::EventDataRawProto* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDataRawProto >&
      events() const;

  // @@protoc_insertion_point(class_scope:Quix.Process.EventDataRawsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDataRawProto > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eventDataRawsProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventDataRawProto

// int64 timestamp = 1;
inline void EventDataRawProto::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t EventDataRawProto::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t EventDataRawProto::timestamp() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDataRawProto.timestamp)
  return _internal_timestamp();
}
inline void EventDataRawProto::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void EventDataRawProto::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Quix.Process.EventDataRawProto.timestamp)
}

// map<string, string> tags = 2;
inline int EventDataRawProto::_internal_tags_size() const {
  return tags_.size();
}
inline int EventDataRawProto::tags_size() const {
  return _internal_tags_size();
}
inline void EventDataRawProto::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EventDataRawProto::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EventDataRawProto::tags() const {
  // @@protoc_insertion_point(field_map:Quix.Process.EventDataRawProto.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EventDataRawProto::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EventDataRawProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:Quix.Process.EventDataRawProto.tags)
  return _internal_mutable_tags();
}

// string id = 3;
inline void EventDataRawProto::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& EventDataRawProto::id() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDataRawProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventDataRawProto::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDataRawProto.id)
}
inline std::string* EventDataRawProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDataRawProto.id)
  return _s;
}
inline const std::string& EventDataRawProto::_internal_id() const {
  return id_.Get();
}
inline void EventDataRawProto::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDataRawProto::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDataRawProto::release_id() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDataRawProto.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EventDataRawProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDataRawProto.id)
}

// string value = 4;
inline void EventDataRawProto::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& EventDataRawProto::value() const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDataRawProto.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventDataRawProto::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quix.Process.EventDataRawProto.value)
}
inline std::string* EventDataRawProto::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDataRawProto.value)
  return _s;
}
inline const std::string& EventDataRawProto::_internal_value() const {
  return value_.Get();
}
inline void EventDataRawProto::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventDataRawProto::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventDataRawProto::release_value() {
  // @@protoc_insertion_point(field_release:Quix.Process.EventDataRawProto.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EventDataRawProto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quix.Process.EventDataRawProto.value)
}

// -------------------------------------------------------------------

// EventDataRawsProto

// repeated .Quix.Process.EventDataRawProto events = 1;
inline int EventDataRawsProto::_internal_events_size() const {
  return events_.size();
}
inline int EventDataRawsProto::events_size() const {
  return _internal_events_size();
}
inline void EventDataRawsProto::clear_events() {
  events_.Clear();
}
inline ::Quix::Process::EventDataRawProto* EventDataRawsProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:Quix.Process.EventDataRawsProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDataRawProto >*
EventDataRawsProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:Quix.Process.EventDataRawsProto.events)
  return &events_;
}
inline const ::Quix::Process::EventDataRawProto& EventDataRawsProto::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::Quix::Process::EventDataRawProto& EventDataRawsProto::events(int index) const {
  // @@protoc_insertion_point(field_get:Quix.Process.EventDataRawsProto.events)
  return _internal_events(index);
}
inline ::Quix::Process::EventDataRawProto* EventDataRawsProto::_internal_add_events() {
  return events_.Add();
}
inline ::Quix::Process::EventDataRawProto* EventDataRawsProto::add_events() {
  ::Quix::Process::EventDataRawProto* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:Quix.Process.EventDataRawsProto.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quix::Process::EventDataRawProto >&
EventDataRawsProto::events() const {
  // @@protoc_insertion_point(field_list:Quix.Process.EventDataRawsProto.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Process
}  // namespace Quix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eventDataRawsProto_2eproto
