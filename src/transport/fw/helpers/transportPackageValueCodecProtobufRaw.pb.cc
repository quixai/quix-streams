// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transportPackageValueCodecProtobufRaw.proto

#include "transportPackageValueCodecProtobufRaw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Quix {
namespace Transport {
constexpr TransportPackageValueCodecProtobufRaw::TransportPackageValueCodecProtobufRaw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codecid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransportPackageValueCodecProtobufRawDefaultTypeInternal {
  constexpr TransportPackageValueCodecProtobufRawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportPackageValueCodecProtobufRawDefaultTypeInternal() {}
  union {
    TransportPackageValueCodecProtobufRaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportPackageValueCodecProtobufRawDefaultTypeInternal _TransportPackageValueCodecProtobufRaw_default_instance_;
}  // namespace Transport
}  // namespace Quix
namespace Quix {
namespace Transport {

// ===================================================================

class TransportPackageValueCodecProtobufRaw::_Internal {
 public:
};

TransportPackageValueCodecProtobufRaw::TransportPackageValueCodecProtobufRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Quix.Transport.TransportPackageValueCodecProtobufRaw)
}
TransportPackageValueCodecProtobufRaw::TransportPackageValueCodecProtobufRaw(const TransportPackageValueCodecProtobufRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  codecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codecid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codecid().empty()) {
    codecid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codecid(), 
      GetArenaForAllocation());
  }
  modelkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modelkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modelkey().empty()) {
    modelkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelkey(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Quix.Transport.TransportPackageValueCodecProtobufRaw)
}

inline void TransportPackageValueCodecProtobufRaw::SharedCtor() {
codecid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codecid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
modelkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modelkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransportPackageValueCodecProtobufRaw::~TransportPackageValueCodecProtobufRaw() {
  // @@protoc_insertion_point(destructor:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TransportPackageValueCodecProtobufRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codecid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransportPackageValueCodecProtobufRaw::ArenaDtor(void* object) {
  TransportPackageValueCodecProtobufRaw* _this = reinterpret_cast< TransportPackageValueCodecProtobufRaw* >(object);
  (void)_this;
}
void TransportPackageValueCodecProtobufRaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportPackageValueCodecProtobufRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportPackageValueCodecProtobufRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codecid_.ClearToEmpty();
  modelkey_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* TransportPackageValueCodecProtobufRaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codecId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codecid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_modelkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportPackageValueCodecProtobufRaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codecId = 1;
  if (!this->_internal_codecid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codecid().data(), static_cast<int>(this->_internal_codecid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Transport.TransportPackageValueCodecProtobufRaw.codecId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codecid(), target);
  }

  // string modelKey = 2;
  if (!this->_internal_modelkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelkey().data(), static_cast<int>(this->_internal_modelkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Quix.Transport.TransportPackageValueCodecProtobufRaw.modelKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modelkey(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  return target;
}

size_t TransportPackageValueCodecProtobufRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codecId = 1;
  if (!this->_internal_codecid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codecid());
  }

  // string modelKey = 2;
  if (!this->_internal_modelkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelkey());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportPackageValueCodecProtobufRaw::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransportPackageValueCodecProtobufRaw*>(
      &from));
}

void TransportPackageValueCodecProtobufRaw::MergeFrom(const TransportPackageValueCodecProtobufRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codecid().empty()) {
    _internal_set_codecid(from._internal_codecid());
  }
  if (!from._internal_modelkey().empty()) {
    _internal_set_modelkey(from._internal_modelkey());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransportPackageValueCodecProtobufRaw::CopyFrom(const TransportPackageValueCodecProtobufRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quix.Transport.TransportPackageValueCodecProtobufRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportPackageValueCodecProtobufRaw::IsInitialized() const {
  return true;
}

void TransportPackageValueCodecProtobufRaw::InternalSwap(TransportPackageValueCodecProtobufRaw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codecid_, lhs_arena,
      &other->codecid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelkey_, lhs_arena,
      &other->modelkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

std::string TransportPackageValueCodecProtobufRaw::GetTypeName() const {
  return "Quix.Transport.TransportPackageValueCodecProtobufRaw";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Transport
}  // namespace Quix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Quix::Transport::TransportPackageValueCodecProtobufRaw* Arena::CreateMaybeMessage< ::Quix::Transport::TransportPackageValueCodecProtobufRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quix::Transport::TransportPackageValueCodecProtobufRaw >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
